
Traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003232  000032c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800068  00800068  000032ce  2**0
                  ALLOC
  3 .stab         00003744  00000000  00000000  000032d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012f1  00000000  00000000  00006a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b898  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bc85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 36       	cpi	r26, 0x6D	; 109
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e3       	ldi	r30, 0x32	; 50
      78:	f2 e3       	ldi	r31, 0x32	; 50
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 d7 18 	call	0x31ae	; 0x31ae <main>
      8a:	0c 94 17 19 	jmp	0x322e	; 0x322e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SetPinDirection_test>:
#include "Test.h"
#include <util/delay.h>


void SetPinDirection_test(u8 port)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c9 54       	subi	r28, 0x49	; 73
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	fe 01       	movw	r30, r28
     b62:	e7 5b       	subi	r30, 0xB7	; 183
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 83       	st	Z, r24
	//checking for valid values
	SetPinDirection(portD,Pin4,Output);
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	64 e0       	ldi	r22, 0x04	; 4
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
	u8 error=9;
     b72:	fe 01       	movw	r30, r28
     b74:	e8 5b       	subi	r30, 0xB8	; 184
     b76:	ff 4f       	sbci	r31, 0xFF	; 255
     b78:	89 e0       	ldi	r24, 0x09	; 9
     b7a:	80 83       	st	Z, r24
	error=SetPinDirection(port,0,0);
     b7c:	fe 01       	movw	r30, r28
     b7e:	e7 5b       	subi	r30, 0xB7	; 183
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 81       	ld	r24, Z
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
     b8c:	fe 01       	movw	r30, r28
     b8e:	e8 5b       	subi	r30, 0xB8	; 184
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	80 83       	st	Z, r24
	if(error!=0)
     b94:	fe 01       	movw	r30, r28
     b96:	e8 5b       	subi	r30, 0xB8	; 184
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	80 81       	ld	r24, Z
     b9c:	88 23       	and	r24, r24
     b9e:	09 f4       	brne	.+2      	; 0xba2 <SetPinDirection_test+0x5c>
     ba0:	90 c0       	rjmp	.+288    	; 0xcc2 <SetPinDirection_test+0x17c>
	{
		SetPinValue(portD,Pin4,High);
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	64 e0       	ldi	r22, 0x04	; 4
     ba6:	41 e0       	ldi	r20, 0x01	; 1
     ba8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
     bac:	fe 01       	movw	r30, r28
     bae:	ed 5b       	subi	r30, 0xBD	; 189
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	aa e7       	ldi	r26, 0x7A	; 122
     bb8:	b4 e4       	ldi	r27, 0x44	; 68
     bba:	80 83       	st	Z, r24
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	a2 83       	std	Z+2, r26	; 0x02
     bc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc2:	8e 01       	movw	r16, r28
     bc4:	01 5c       	subi	r16, 0xC1	; 193
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
     bc8:	fe 01       	movw	r30, r28
     bca:	ed 5b       	subi	r30, 0xBD	; 189
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	60 81       	ld	r22, Z
     bd0:	71 81       	ldd	r23, Z+1	; 0x01
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	93 81       	ldd	r25, Z+3	; 0x03
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4a ef       	ldi	r20, 0xFA	; 250
     bdc:	54 e4       	ldi	r21, 0x44	; 68
     bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	f8 01       	movw	r30, r16
     be8:	80 83       	st	Z, r24
     bea:	91 83       	std	Z+1, r25	; 0x01
     bec:	a2 83       	std	Z+2, r26	; 0x02
     bee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bf0:	fe 01       	movw	r30, r28
     bf2:	ff 96       	adiw	r30, 0x3f	; 63
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <SetPinDirection_test+0xd0>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9e af       	std	Y+62, r25	; 0x3e
     c12:	8d af       	std	Y+61, r24	; 0x3d
     c14:	46 c0       	rjmp	.+140    	; 0xca2 <SetPinDirection_test+0x15c>
	else if (__tmp > 65535)
     c16:	fe 01       	movw	r30, r28
     c18:	ff 96       	adiw	r30, 0x3f	; 63
     c1a:	60 81       	ld	r22, Z
     c1c:	71 81       	ldd	r23, Z+1	; 0x01
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	3f ef       	ldi	r19, 0xFF	; 255
     c26:	4f e7       	ldi	r20, 0x7F	; 127
     c28:	57 e4       	ldi	r21, 0x47	; 71
     c2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2e:	18 16       	cp	r1, r24
     c30:	64 f5       	brge	.+88     	; 0xc8a <SetPinDirection_test+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c32:	fe 01       	movw	r30, r28
     c34:	ed 5b       	subi	r30, 0xBD	; 189
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	60 81       	ld	r22, Z
     c3a:	71 81       	ldd	r23, Z+1	; 0x01
     c3c:	82 81       	ldd	r24, Z+2	; 0x02
     c3e:	93 81       	ldd	r25, Z+3	; 0x03
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 e2       	ldi	r20, 0x20	; 32
     c46:	51 e4       	ldi	r21, 0x41	; 65
     c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9e af       	std	Y+62, r25	; 0x3e
     c5e:	8d af       	std	Y+61, r24	; 0x3d
     c60:	0f c0       	rjmp	.+30     	; 0xc80 <SetPinDirection_test+0x13a>
     c62:	88 ec       	ldi	r24, 0xC8	; 200
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9c af       	std	Y+60, r25	; 0x3c
     c68:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c6a:	8b ad       	ldd	r24, Y+59	; 0x3b
     c6c:	9c ad       	ldd	r25, Y+60	; 0x3c
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <SetPinDirection_test+0x128>
     c72:	9c af       	std	Y+60, r25	; 0x3c
     c74:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c76:	8d ad       	ldd	r24, Y+61	; 0x3d
     c78:	9e ad       	ldd	r25, Y+62	; 0x3e
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	9e af       	std	Y+62, r25	; 0x3e
     c7e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c80:	8d ad       	ldd	r24, Y+61	; 0x3d
     c82:	9e ad       	ldd	r25, Y+62	; 0x3e
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	69 f7       	brne	.-38     	; 0xc62 <SetPinDirection_test+0x11c>
     c88:	16 c0       	rjmp	.+44     	; 0xcb6 <SetPinDirection_test+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8a:	fe 01       	movw	r30, r28
     c8c:	ff 96       	adiw	r30, 0x3f	; 63
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	9e af       	std	Y+62, r25	; 0x3e
     ca0:	8d af       	std	Y+61, r24	; 0x3d
     ca2:	8d ad       	ldd	r24, Y+61	; 0x3d
     ca4:	9e ad       	ldd	r25, Y+62	; 0x3e
     ca6:	9a af       	std	Y+58, r25	; 0x3a
     ca8:	89 af       	std	Y+57, r24	; 0x39
     caa:	89 ad       	ldd	r24, Y+57	; 0x39
     cac:	9a ad       	ldd	r25, Y+58	; 0x3a
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <SetPinDirection_test+0x168>
     cb2:	9a af       	std	Y+58, r25	; 0x3a
     cb4:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		SetPinValue(portD,Pin4,Low);
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	64 e0       	ldi	r22, 0x04	; 4
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
     cc0:	29 c2       	rjmp	.+1106   	; 0x1114 <SetPinDirection_test+0x5ce>
	}
	else
	{
		u8 counter;
		for(counter=0;counter<9;counter++)
     cc2:	fe 01       	movw	r30, r28
     cc4:	e9 5b       	subi	r30, 0xB9	; 185
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	10 82       	st	Z, r1
     cca:	8e c1       	rjmp	.+796    	; 0xfe8 <SetPinDirection_test+0x4a2>
		{
			error=SetPinDirection(port,counter,Output);
     ccc:	fe 01       	movw	r30, r28
     cce:	e7 5b       	subi	r30, 0xB7	; 183
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	de 01       	movw	r26, r28
     cd4:	a9 5b       	subi	r26, 0xB9	; 185
     cd6:	bf 4f       	sbci	r27, 0xFF	; 255
     cd8:	80 81       	ld	r24, Z
     cda:	6c 91       	ld	r22, X
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
     ce2:	fe 01       	movw	r30, r28
     ce4:	e8 5b       	subi	r30, 0xB8	; 184
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 83       	st	Z, r24
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	aa e7       	ldi	r26, 0x7A	; 122
     cf0:	b4 e4       	ldi	r27, 0x44	; 68
     cf2:	8d ab       	std	Y+53, r24	; 0x35
     cf4:	9e ab       	std	Y+54, r25	; 0x36
     cf6:	af ab       	std	Y+55, r26	; 0x37
     cf8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfa:	6d a9       	ldd	r22, Y+53	; 0x35
     cfc:	7e a9       	ldd	r23, Y+54	; 0x36
     cfe:	8f a9       	ldd	r24, Y+55	; 0x37
     d00:	98 ad       	ldd	r25, Y+56	; 0x38
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a ef       	ldi	r20, 0xFA	; 250
     d08:	54 e4       	ldi	r21, 0x44	; 68
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	89 ab       	std	Y+49, r24	; 0x31
     d14:	9a ab       	std	Y+50, r25	; 0x32
     d16:	ab ab       	std	Y+51, r26	; 0x33
     d18:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d1a:	69 a9       	ldd	r22, Y+49	; 0x31
     d1c:	7a a9       	ldd	r23, Y+50	; 0x32
     d1e:	8b a9       	ldd	r24, Y+51	; 0x33
     d20:	9c a9       	ldd	r25, Y+52	; 0x34
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d2e:	88 23       	and	r24, r24
     d30:	2c f4       	brge	.+10     	; 0xd3c <SetPinDirection_test+0x1f6>
		__ticks = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	98 ab       	std	Y+48, r25	; 0x30
     d38:	8f a7       	std	Y+47, r24	; 0x2f
     d3a:	3f c0       	rjmp	.+126    	; 0xdba <SetPinDirection_test+0x274>
	else if (__tmp > 65535)
     d3c:	69 a9       	ldd	r22, Y+49	; 0x31
     d3e:	7a a9       	ldd	r23, Y+50	; 0x32
     d40:	8b a9       	ldd	r24, Y+51	; 0x33
     d42:	9c a9       	ldd	r25, Y+52	; 0x34
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	3f ef       	ldi	r19, 0xFF	; 255
     d48:	4f e7       	ldi	r20, 0x7F	; 127
     d4a:	57 e4       	ldi	r21, 0x47	; 71
     d4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d50:	18 16       	cp	r1, r24
     d52:	4c f5       	brge	.+82     	; 0xda6 <SetPinDirection_test+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d54:	6d a9       	ldd	r22, Y+53	; 0x35
     d56:	7e a9       	ldd	r23, Y+54	; 0x36
     d58:	8f a9       	ldd	r24, Y+55	; 0x37
     d5a:	98 ad       	ldd	r25, Y+56	; 0x38
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e2       	ldi	r20, 0x20	; 32
     d62:	51 e4       	ldi	r21, 0x41	; 65
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	98 ab       	std	Y+48, r25	; 0x30
     d7a:	8f a7       	std	Y+47, r24	; 0x2f
     d7c:	0f c0       	rjmp	.+30     	; 0xd9c <SetPinDirection_test+0x256>
     d7e:	88 ec       	ldi	r24, 0xC8	; 200
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9e a7       	std	Y+46, r25	; 0x2e
     d84:	8d a7       	std	Y+45, r24	; 0x2d
     d86:	8d a5       	ldd	r24, Y+45	; 0x2d
     d88:	9e a5       	ldd	r25, Y+46	; 0x2e
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <SetPinDirection_test+0x244>
     d8e:	9e a7       	std	Y+46, r25	; 0x2e
     d90:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d92:	8f a5       	ldd	r24, Y+47	; 0x2f
     d94:	98 a9       	ldd	r25, Y+48	; 0x30
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	98 ab       	std	Y+48, r25	; 0x30
     d9a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d9e:	98 a9       	ldd	r25, Y+48	; 0x30
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	69 f7       	brne	.-38     	; 0xd7e <SetPinDirection_test+0x238>
     da4:	14 c0       	rjmp	.+40     	; 0xdce <SetPinDirection_test+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da6:	69 a9       	ldd	r22, Y+49	; 0x31
     da8:	7a a9       	ldd	r23, Y+50	; 0x32
     daa:	8b a9       	ldd	r24, Y+51	; 0x33
     dac:	9c a9       	ldd	r25, Y+52	; 0x34
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	98 ab       	std	Y+48, r25	; 0x30
     db8:	8f a7       	std	Y+47, r24	; 0x2f
     dba:	8f a5       	ldd	r24, Y+47	; 0x2f
     dbc:	98 a9       	ldd	r25, Y+48	; 0x30
     dbe:	9c a7       	std	Y+44, r25	; 0x2c
     dc0:	8b a7       	std	Y+43, r24	; 0x2b
     dc2:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc4:	9c a5       	ldd	r25, Y+44	; 0x2c
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <SetPinDirection_test+0x280>
     dca:	9c a7       	std	Y+44, r25	; 0x2c
     dcc:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			error=SetPinDirection(port,counter,Input);
     dce:	fe 01       	movw	r30, r28
     dd0:	e7 5b       	subi	r30, 0xB7	; 183
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	de 01       	movw	r26, r28
     dd6:	a9 5b       	subi	r26, 0xB9	; 185
     dd8:	bf 4f       	sbci	r27, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	6c 91       	ld	r22, X
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
     de4:	fe 01       	movw	r30, r28
     de6:	e8 5b       	subi	r30, 0xB8	; 184
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	80 83       	st	Z, r24
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	aa e7       	ldi	r26, 0x7A	; 122
     df2:	b4 e4       	ldi	r27, 0x44	; 68
     df4:	8f a3       	std	Y+39, r24	; 0x27
     df6:	98 a7       	std	Y+40, r25	; 0x28
     df8:	a9 a7       	std	Y+41, r26	; 0x29
     dfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	6f a1       	ldd	r22, Y+39	; 0x27
     dfe:	78 a5       	ldd	r23, Y+40	; 0x28
     e00:	89 a5       	ldd	r24, Y+41	; 0x29
     e02:	9a a5       	ldd	r25, Y+42	; 0x2a
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4a ef       	ldi	r20, 0xFA	; 250
     e0a:	54 e4       	ldi	r21, 0x44	; 68
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	8b a3       	std	Y+35, r24	; 0x23
     e16:	9c a3       	std	Y+36, r25	; 0x24
     e18:	ad a3       	std	Y+37, r26	; 0x25
     e1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e1c:	6b a1       	ldd	r22, Y+35	; 0x23
     e1e:	7c a1       	ldd	r23, Y+36	; 0x24
     e20:	8d a1       	ldd	r24, Y+37	; 0x25
     e22:	9e a1       	ldd	r25, Y+38	; 0x26
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <SetPinDirection_test+0x2f8>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9a a3       	std	Y+34, r25	; 0x22
     e3a:	89 a3       	std	Y+33, r24	; 0x21
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <SetPinDirection_test+0x376>
	else if (__tmp > 65535)
     e3e:	6b a1       	ldd	r22, Y+35	; 0x23
     e40:	7c a1       	ldd	r23, Y+36	; 0x24
     e42:	8d a1       	ldd	r24, Y+37	; 0x25
     e44:	9e a1       	ldd	r25, Y+38	; 0x26
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <SetPinDirection_test+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	6f a1       	ldd	r22, Y+39	; 0x27
     e58:	78 a5       	ldd	r23, Y+40	; 0x28
     e5a:	89 a5       	ldd	r24, Y+41	; 0x29
     e5c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9a a3       	std	Y+34, r25	; 0x22
     e7c:	89 a3       	std	Y+33, r24	; 0x21
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <SetPinDirection_test+0x358>
     e80:	88 ec       	ldi	r24, 0xC8	; 200
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	98 a3       	std	Y+32, r25	; 0x20
     e86:	8f 8f       	std	Y+31, r24	; 0x1f
     e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e8a:	98 a1       	ldd	r25, Y+32	; 0x20
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <SetPinDirection_test+0x346>
     e90:	98 a3       	std	Y+32, r25	; 0x20
     e92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	89 a1       	ldd	r24, Y+33	; 0x21
     e96:	9a a1       	ldd	r25, Y+34	; 0x22
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9a a3       	std	Y+34, r25	; 0x22
     e9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	89 a1       	ldd	r24, Y+33	; 0x21
     ea0:	9a a1       	ldd	r25, Y+34	; 0x22
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f7       	brne	.-38     	; 0xe80 <SetPinDirection_test+0x33a>
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <SetPinDirection_test+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	6b a1       	ldd	r22, Y+35	; 0x23
     eaa:	7c a1       	ldd	r23, Y+36	; 0x24
     eac:	8d a1       	ldd	r24, Y+37	; 0x25
     eae:	9e a1       	ldd	r25, Y+38	; 0x26
     eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9a a3       	std	Y+34, r25	; 0x22
     eba:	89 a3       	std	Y+33, r24	; 0x21
     ebc:	89 a1       	ldd	r24, Y+33	; 0x21
     ebe:	9a a1       	ldd	r25, Y+34	; 0x22
     ec0:	9e 8f       	std	Y+30, r25	; 0x1e
     ec2:	8d 8f       	std	Y+29, r24	; 0x1d
     ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ec6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <SetPinDirection_test+0x382>
     ecc:	9e 8f       	std	Y+30, r25	; 0x1e
     ece:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			if(error!=0)
     ed0:	fe 01       	movw	r30, r28
     ed2:	e8 5b       	subi	r30, 0xB8	; 184
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	80 81       	ld	r24, Z
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <SetPinDirection_test+0x398>
     edc:	7c c0       	rjmp	.+248    	; 0xfd6 <SetPinDirection_test+0x490>
			{
				SetPinValue(portD,Pin4,High);
     ede:	83 e0       	ldi	r24, 0x03	; 3
     ee0:	64 e0       	ldi	r22, 0x04	; 4
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	aa e7       	ldi	r26, 0x7A	; 122
     eee:	b4 e4       	ldi	r27, 0x44	; 68
     ef0:	89 8f       	std	Y+25, r24	; 0x19
     ef2:	9a 8f       	std	Y+26, r25	; 0x1a
     ef4:	ab 8f       	std	Y+27, r26	; 0x1b
     ef6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef8:	69 8d       	ldd	r22, Y+25	; 0x19
     efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	4a ef       	ldi	r20, 0xFA	; 250
     f06:	54 e4       	ldi	r21, 0x44	; 68
     f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	8d 8b       	std	Y+21, r24	; 0x15
     f12:	9e 8b       	std	Y+22, r25	; 0x16
     f14:	af 8b       	std	Y+23, r26	; 0x17
     f16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f18:	6d 89       	ldd	r22, Y+21	; 0x15
     f1a:	7e 89       	ldd	r23, Y+22	; 0x16
     f1c:	8f 89       	ldd	r24, Y+23	; 0x17
     f1e:	98 8d       	ldd	r25, Y+24	; 0x18
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	2c f4       	brge	.+10     	; 0xf3a <SetPinDirection_test+0x3f4>
		__ticks = 1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9c 8b       	std	Y+20, r25	; 0x14
     f36:	8b 8b       	std	Y+19, r24	; 0x13
     f38:	3f c0       	rjmp	.+126    	; 0xfb8 <SetPinDirection_test+0x472>
	else if (__tmp > 65535)
     f3a:	6d 89       	ldd	r22, Y+21	; 0x15
     f3c:	7e 89       	ldd	r23, Y+22	; 0x16
     f3e:	8f 89       	ldd	r24, Y+23	; 0x17
     f40:	98 8d       	ldd	r25, Y+24	; 0x18
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	3f ef       	ldi	r19, 0xFF	; 255
     f46:	4f e7       	ldi	r20, 0x7F	; 127
     f48:	57 e4       	ldi	r21, 0x47	; 71
     f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f4e:	18 16       	cp	r1, r24
     f50:	4c f5       	brge	.+82     	; 0xfa4 <SetPinDirection_test+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f52:	69 8d       	ldd	r22, Y+25	; 0x19
     f54:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f56:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f58:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e2       	ldi	r20, 0x20	; 32
     f60:	51 e4       	ldi	r21, 0x41	; 65
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	9c 8b       	std	Y+20, r25	; 0x14
     f78:	8b 8b       	std	Y+19, r24	; 0x13
     f7a:	0f c0       	rjmp	.+30     	; 0xf9a <SetPinDirection_test+0x454>
     f7c:	88 ec       	ldi	r24, 0xC8	; 200
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9a 8b       	std	Y+18, r25	; 0x12
     f82:	89 8b       	std	Y+17, r24	; 0x11
     f84:	89 89       	ldd	r24, Y+17	; 0x11
     f86:	9a 89       	ldd	r25, Y+18	; 0x12
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <SetPinDirection_test+0x442>
     f8c:	9a 8b       	std	Y+18, r25	; 0x12
     f8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f90:	8b 89       	ldd	r24, Y+19	; 0x13
     f92:	9c 89       	ldd	r25, Y+20	; 0x14
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	9c 8b       	std	Y+20, r25	; 0x14
     f98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9a:	8b 89       	ldd	r24, Y+19	; 0x13
     f9c:	9c 89       	ldd	r25, Y+20	; 0x14
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	69 f7       	brne	.-38     	; 0xf7c <SetPinDirection_test+0x436>
     fa2:	14 c0       	rjmp	.+40     	; 0xfcc <SetPinDirection_test+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa4:	6d 89       	ldd	r22, Y+21	; 0x15
     fa6:	7e 89       	ldd	r23, Y+22	; 0x16
     fa8:	8f 89       	ldd	r24, Y+23	; 0x17
     faa:	98 8d       	ldd	r25, Y+24	; 0x18
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9c 8b       	std	Y+20, r25	; 0x14
     fb6:	8b 8b       	std	Y+19, r24	; 0x13
     fb8:	8b 89       	ldd	r24, Y+19	; 0x13
     fba:	9c 89       	ldd	r25, Y+20	; 0x14
     fbc:	98 8b       	std	Y+16, r25	; 0x10
     fbe:	8f 87       	std	Y+15, r24	; 0x0f
     fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc2:	98 89       	ldd	r25, Y+16	; 0x10
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <SetPinDirection_test+0x47e>
     fc8:	98 8b       	std	Y+16, r25	; 0x10
     fca:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				SetPinValue(portD,Pin4,Low);
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	64 e0       	ldi	r22, 0x04	; 4
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		SetPinValue(portD,Pin4,Low);
	}
	else
	{
		u8 counter;
		for(counter=0;counter<9;counter++)
     fd6:	de 01       	movw	r26, r28
     fd8:	a9 5b       	subi	r26, 0xB9	; 185
     fda:	bf 4f       	sbci	r27, 0xFF	; 255
     fdc:	fe 01       	movw	r30, r28
     fde:	e9 5b       	subi	r30, 0xB9	; 185
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	8c 93       	st	X, r24
     fe8:	fe 01       	movw	r30, r28
     fea:	e9 5b       	subi	r30, 0xB9	; 185
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	80 81       	ld	r24, Z
     ff0:	89 30       	cpi	r24, 0x09	; 9
     ff2:	08 f4       	brcc	.+2      	; 0xff6 <SetPinDirection_test+0x4b0>
     ff4:	6b ce       	rjmp	.-810    	; 0xccc <SetPinDirection_test+0x186>
				_delay_ms(1000);
				SetPinValue(portD,Pin4,Low);
			}
		}
		//checking for invalid value
		error=SetPinDirection(port,4,2);
     ff6:	fe 01       	movw	r30, r28
     ff8:	e7 5b       	subi	r30, 0xB7	; 183
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	80 81       	ld	r24, Z
     ffe:	64 e0       	ldi	r22, 0x04	; 4
    1000:	42 e0       	ldi	r20, 0x02	; 2
    1002:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
    1006:	fe 01       	movw	r30, r28
    1008:	e8 5b       	subi	r30, 0xB8	; 184
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 83       	st	Z, r24
		if(error!=0)
    100e:	fe 01       	movw	r30, r28
    1010:	e8 5b       	subi	r30, 0xB8	; 184
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	09 f4       	brne	.+2      	; 0x101c <SetPinDirection_test+0x4d6>
    101a:	7c c0       	rjmp	.+248    	; 0x1114 <SetPinDirection_test+0x5ce>
		{
			SetPinValue(portD,Pin4,High);
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	64 e0       	ldi	r22, 0x04	; 4
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	aa e7       	ldi	r26, 0x7A	; 122
    102c:	b4 e4       	ldi	r27, 0x44	; 68
    102e:	8b 87       	std	Y+11, r24	; 0x0b
    1030:	9c 87       	std	Y+12, r25	; 0x0c
    1032:	ad 87       	std	Y+13, r26	; 0x0d
    1034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1036:	6b 85       	ldd	r22, Y+11	; 0x0b
    1038:	7c 85       	ldd	r23, Y+12	; 0x0c
    103a:	8d 85       	ldd	r24, Y+13	; 0x0d
    103c:	9e 85       	ldd	r25, Y+14	; 0x0e
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	4a ef       	ldi	r20, 0xFA	; 250
    1044:	54 e4       	ldi	r21, 0x44	; 68
    1046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	8f 83       	std	Y+7, r24	; 0x07
    1050:	98 87       	std	Y+8, r25	; 0x08
    1052:	a9 87       	std	Y+9, r26	; 0x09
    1054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1056:	6f 81       	ldd	r22, Y+7	; 0x07
    1058:	78 85       	ldd	r23, Y+8	; 0x08
    105a:	89 85       	ldd	r24, Y+9	; 0x09
    105c:	9a 85       	ldd	r25, Y+10	; 0x0a
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e8       	ldi	r20, 0x80	; 128
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    106a:	88 23       	and	r24, r24
    106c:	2c f4       	brge	.+10     	; 0x1078 <SetPinDirection_test+0x532>
		__ticks = 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	3f c0       	rjmp	.+126    	; 0x10f6 <SetPinDirection_test+0x5b0>
	else if (__tmp > 65535)
    1078:	6f 81       	ldd	r22, Y+7	; 0x07
    107a:	78 85       	ldd	r23, Y+8	; 0x08
    107c:	89 85       	ldd	r24, Y+9	; 0x09
    107e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	3f ef       	ldi	r19, 0xFF	; 255
    1084:	4f e7       	ldi	r20, 0x7F	; 127
    1086:	57 e4       	ldi	r21, 0x47	; 71
    1088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    108c:	18 16       	cp	r1, r24
    108e:	4c f5       	brge	.+82     	; 0x10e2 <SetPinDirection_test+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1090:	6b 85       	ldd	r22, Y+11	; 0x0b
    1092:	7c 85       	ldd	r23, Y+12	; 0x0c
    1094:	8d 85       	ldd	r24, Y+13	; 0x0d
    1096:	9e 85       	ldd	r25, Y+14	; 0x0e
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e2       	ldi	r20, 0x20	; 32
    109e:	51 e4       	ldi	r21, 0x41	; 65
    10a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	bc 01       	movw	r22, r24
    10aa:	cd 01       	movw	r24, r26
    10ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	0f c0       	rjmp	.+30     	; 0x10d8 <SetPinDirection_test+0x592>
    10ba:	88 ec       	ldi	r24, 0xC8	; 200
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9c 83       	std	Y+4, r25	; 0x04
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <SetPinDirection_test+0x580>
    10ca:	9c 83       	std	Y+4, r25	; 0x04
    10cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	69 f7       	brne	.-38     	; 0x10ba <SetPinDirection_test+0x574>
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <SetPinDirection_test+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	9e 83       	std	Y+6, r25	; 0x06
    10f4:	8d 83       	std	Y+5, r24	; 0x05
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	9a 83       	std	Y+2, r25	; 0x02
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <SetPinDirection_test+0x5bc>
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			SetPinValue(portD,Pin4,Low);
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	64 e0       	ldi	r22, 0x04	; 4
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		}
	}
}
    1114:	c7 5b       	subi	r28, 0xB7	; 183
    1116:	df 4f       	sbci	r29, 0xFF	; 255
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	08 95       	ret

0000112c <SetPinValue_test>:
void SetPinValue_test(u8 port)
{
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	c9 54       	subi	r28, 0x49	; 73
    113a:	d0 40       	sbci	r29, 0x00	; 0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	fe 01       	movw	r30, r28
    1148:	e7 5b       	subi	r30, 0xB7	; 183
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 83       	st	Z, r24
	//checking for valid values
	SetPinDirection(portD,Pin4,Output);
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	64 e0       	ldi	r22, 0x04	; 4
    1152:	41 e0       	ldi	r20, 0x01	; 1
    1154:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
	u8 error=9;
    1158:	fe 01       	movw	r30, r28
    115a:	e8 5b       	subi	r30, 0xB8	; 184
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	89 e0       	ldi	r24, 0x09	; 9
    1160:	80 83       	st	Z, r24
	error=SetPinValue(port,0,0);
    1162:	fe 01       	movw	r30, r28
    1164:	e7 5b       	subi	r30, 0xB7	; 183
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	80 81       	ld	r24, Z
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1172:	fe 01       	movw	r30, r28
    1174:	e8 5b       	subi	r30, 0xB8	; 184
    1176:	ff 4f       	sbci	r31, 0xFF	; 255
    1178:	80 83       	st	Z, r24
	if(error!=0)
    117a:	fe 01       	movw	r30, r28
    117c:	e8 5b       	subi	r30, 0xB8	; 184
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	80 81       	ld	r24, Z
    1182:	88 23       	and	r24, r24
    1184:	09 f4       	brne	.+2      	; 0x1188 <SetPinValue_test+0x5c>
    1186:	90 c0       	rjmp	.+288    	; 0x12a8 <SetPinValue_test+0x17c>
	{
		SetPinValue(portD,Pin4,High);
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	64 e0       	ldi	r22, 0x04	; 4
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1192:	fe 01       	movw	r30, r28
    1194:	ed 5b       	subi	r30, 0xBD	; 189
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	aa e7       	ldi	r26, 0x7A	; 122
    119e:	b4 e4       	ldi	r27, 0x44	; 68
    11a0:	80 83       	st	Z, r24
    11a2:	91 83       	std	Z+1, r25	; 0x01
    11a4:	a2 83       	std	Z+2, r26	; 0x02
    11a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	8e 01       	movw	r16, r28
    11aa:	01 5c       	subi	r16, 0xC1	; 193
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	fe 01       	movw	r30, r28
    11b0:	ed 5b       	subi	r30, 0xBD	; 189
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a ef       	ldi	r20, 0xFA	; 250
    11c2:	54 e4       	ldi	r21, 0x44	; 68
    11c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	f8 01       	movw	r30, r16
    11ce:	80 83       	st	Z, r24
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	a2 83       	std	Z+2, r26	; 0x02
    11d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11d6:	fe 01       	movw	r30, r28
    11d8:	ff 96       	adiw	r30, 0x3f	; 63
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e8       	ldi	r20, 0x80	; 128
    11e8:	5f e3       	ldi	r21, 0x3F	; 63
    11ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	2c f4       	brge	.+10     	; 0x11fc <SetPinValue_test+0xd0>
		__ticks = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9e af       	std	Y+62, r25	; 0x3e
    11f8:	8d af       	std	Y+61, r24	; 0x3d
    11fa:	46 c0       	rjmp	.+140    	; 0x1288 <SetPinValue_test+0x15c>
	else if (__tmp > 65535)
    11fc:	fe 01       	movw	r30, r28
    11fe:	ff 96       	adiw	r30, 0x3f	; 63
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	4f e7       	ldi	r20, 0x7F	; 127
    120e:	57 e4       	ldi	r21, 0x47	; 71
    1210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1214:	18 16       	cp	r1, r24
    1216:	64 f5       	brge	.+88     	; 0x1270 <SetPinValue_test+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1218:	fe 01       	movw	r30, r28
    121a:	ed 5b       	subi	r30, 0xBD	; 189
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e2       	ldi	r20, 0x20	; 32
    122c:	51 e4       	ldi	r21, 0x41	; 65
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9e af       	std	Y+62, r25	; 0x3e
    1244:	8d af       	std	Y+61, r24	; 0x3d
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <SetPinValue_test+0x13a>
    1248:	88 ec       	ldi	r24, 0xC8	; 200
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9c af       	std	Y+60, r25	; 0x3c
    124e:	8b af       	std	Y+59, r24	; 0x3b
    1250:	8b ad       	ldd	r24, Y+59	; 0x3b
    1252:	9c ad       	ldd	r25, Y+60	; 0x3c
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <SetPinValue_test+0x128>
    1258:	9c af       	std	Y+60, r25	; 0x3c
    125a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125c:	8d ad       	ldd	r24, Y+61	; 0x3d
    125e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	9e af       	std	Y+62, r25	; 0x3e
    1264:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1266:	8d ad       	ldd	r24, Y+61	; 0x3d
    1268:	9e ad       	ldd	r25, Y+62	; 0x3e
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	69 f7       	brne	.-38     	; 0x1248 <SetPinValue_test+0x11c>
    126e:	16 c0       	rjmp	.+44     	; 0x129c <SetPinValue_test+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1270:	fe 01       	movw	r30, r28
    1272:	ff 96       	adiw	r30, 0x3f	; 63
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9e af       	std	Y+62, r25	; 0x3e
    1286:	8d af       	std	Y+61, r24	; 0x3d
    1288:	8d ad       	ldd	r24, Y+61	; 0x3d
    128a:	9e ad       	ldd	r25, Y+62	; 0x3e
    128c:	9a af       	std	Y+58, r25	; 0x3a
    128e:	89 af       	std	Y+57, r24	; 0x39
    1290:	89 ad       	ldd	r24, Y+57	; 0x39
    1292:	9a ad       	ldd	r25, Y+58	; 0x3a
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <SetPinValue_test+0x168>
    1298:	9a af       	std	Y+58, r25	; 0x3a
    129a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		SetPinValue(portD,Pin4,Low);
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	64 e0       	ldi	r22, 0x04	; 4
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    12a6:	29 c2       	rjmp	.+1106   	; 0x16fa <SetPinValue_test+0x5ce>
	}
	else
	{
		u8 counter;
		for(counter=0;counter<9;counter++)
    12a8:	fe 01       	movw	r30, r28
    12aa:	e9 5b       	subi	r30, 0xB9	; 185
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	10 82       	st	Z, r1
    12b0:	8e c1       	rjmp	.+796    	; 0x15ce <SetPinValue_test+0x4a2>
		{
			error=SetPinValue(port,counter,Output);
    12b2:	fe 01       	movw	r30, r28
    12b4:	e7 5b       	subi	r30, 0xB7	; 183
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	de 01       	movw	r26, r28
    12ba:	a9 5b       	subi	r26, 0xB9	; 185
    12bc:	bf 4f       	sbci	r27, 0xFF	; 255
    12be:	80 81       	ld	r24, Z
    12c0:	6c 91       	ld	r22, X
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    12c8:	fe 01       	movw	r30, r28
    12ca:	e8 5b       	subi	r30, 0xB8	; 184
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 83       	st	Z, r24
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	aa e7       	ldi	r26, 0x7A	; 122
    12d6:	b4 e4       	ldi	r27, 0x44	; 68
    12d8:	8d ab       	std	Y+53, r24	; 0x35
    12da:	9e ab       	std	Y+54, r25	; 0x36
    12dc:	af ab       	std	Y+55, r26	; 0x37
    12de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e0:	6d a9       	ldd	r22, Y+53	; 0x35
    12e2:	7e a9       	ldd	r23, Y+54	; 0x36
    12e4:	8f a9       	ldd	r24, Y+55	; 0x37
    12e6:	98 ad       	ldd	r25, Y+56	; 0x38
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a ef       	ldi	r20, 0xFA	; 250
    12ee:	54 e4       	ldi	r21, 0x44	; 68
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	89 ab       	std	Y+49, r24	; 0x31
    12fa:	9a ab       	std	Y+50, r25	; 0x32
    12fc:	ab ab       	std	Y+51, r26	; 0x33
    12fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1300:	69 a9       	ldd	r22, Y+49	; 0x31
    1302:	7a a9       	ldd	r23, Y+50	; 0x32
    1304:	8b a9       	ldd	r24, Y+51	; 0x33
    1306:	9c a9       	ldd	r25, Y+52	; 0x34
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <SetPinValue_test+0x1f6>
		__ticks = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	98 ab       	std	Y+48, r25	; 0x30
    131e:	8f a7       	std	Y+47, r24	; 0x2f
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <SetPinValue_test+0x274>
	else if (__tmp > 65535)
    1322:	69 a9       	ldd	r22, Y+49	; 0x31
    1324:	7a a9       	ldd	r23, Y+50	; 0x32
    1326:	8b a9       	ldd	r24, Y+51	; 0x33
    1328:	9c a9       	ldd	r25, Y+52	; 0x34
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	4c f5       	brge	.+82     	; 0x138c <SetPinValue_test+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	6d a9       	ldd	r22, Y+53	; 0x35
    133c:	7e a9       	ldd	r23, Y+54	; 0x36
    133e:	8f a9       	ldd	r24, Y+55	; 0x37
    1340:	98 ad       	ldd	r25, Y+56	; 0x38
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	98 ab       	std	Y+48, r25	; 0x30
    1360:	8f a7       	std	Y+47, r24	; 0x2f
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <SetPinValue_test+0x256>
    1364:	88 ec       	ldi	r24, 0xC8	; 200
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9e a7       	std	Y+46, r25	; 0x2e
    136a:	8d a7       	std	Y+45, r24	; 0x2d
    136c:	8d a5       	ldd	r24, Y+45	; 0x2d
    136e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <SetPinValue_test+0x244>
    1374:	9e a7       	std	Y+46, r25	; 0x2e
    1376:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	8f a5       	ldd	r24, Y+47	; 0x2f
    137a:	98 a9       	ldd	r25, Y+48	; 0x30
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	98 ab       	std	Y+48, r25	; 0x30
    1380:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1382:	8f a5       	ldd	r24, Y+47	; 0x2f
    1384:	98 a9       	ldd	r25, Y+48	; 0x30
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	69 f7       	brne	.-38     	; 0x1364 <SetPinValue_test+0x238>
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <SetPinValue_test+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138c:	69 a9       	ldd	r22, Y+49	; 0x31
    138e:	7a a9       	ldd	r23, Y+50	; 0x32
    1390:	8b a9       	ldd	r24, Y+51	; 0x33
    1392:	9c a9       	ldd	r25, Y+52	; 0x34
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	98 ab       	std	Y+48, r25	; 0x30
    139e:	8f a7       	std	Y+47, r24	; 0x2f
    13a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a2:	98 a9       	ldd	r25, Y+48	; 0x30
    13a4:	9c a7       	std	Y+44, r25	; 0x2c
    13a6:	8b a7       	std	Y+43, r24	; 0x2b
    13a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <SetPinValue_test+0x280>
    13b0:	9c a7       	std	Y+44, r25	; 0x2c
    13b2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			error=SetPinValue(port,counter,Input);
    13b4:	fe 01       	movw	r30, r28
    13b6:	e7 5b       	subi	r30, 0xB7	; 183
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	de 01       	movw	r26, r28
    13bc:	a9 5b       	subi	r26, 0xB9	; 185
    13be:	bf 4f       	sbci	r27, 0xFF	; 255
    13c0:	80 81       	ld	r24, Z
    13c2:	6c 91       	ld	r22, X
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    13ca:	fe 01       	movw	r30, r28
    13cc:	e8 5b       	subi	r30, 0xB8	; 184
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 83       	st	Z, r24
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	aa e7       	ldi	r26, 0x7A	; 122
    13d8:	b4 e4       	ldi	r27, 0x44	; 68
    13da:	8f a3       	std	Y+39, r24	; 0x27
    13dc:	98 a7       	std	Y+40, r25	; 0x28
    13de:	a9 a7       	std	Y+41, r26	; 0x29
    13e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e2:	6f a1       	ldd	r22, Y+39	; 0x27
    13e4:	78 a5       	ldd	r23, Y+40	; 0x28
    13e6:	89 a5       	ldd	r24, Y+41	; 0x29
    13e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	4a ef       	ldi	r20, 0xFA	; 250
    13f0:	54 e4       	ldi	r21, 0x44	; 68
    13f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	8b a3       	std	Y+35, r24	; 0x23
    13fc:	9c a3       	std	Y+36, r25	; 0x24
    13fe:	ad a3       	std	Y+37, r26	; 0x25
    1400:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1402:	6b a1       	ldd	r22, Y+35	; 0x23
    1404:	7c a1       	ldd	r23, Y+36	; 0x24
    1406:	8d a1       	ldd	r24, Y+37	; 0x25
    1408:	9e a1       	ldd	r25, Y+38	; 0x26
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1416:	88 23       	and	r24, r24
    1418:	2c f4       	brge	.+10     	; 0x1424 <SetPinValue_test+0x2f8>
		__ticks = 1;
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9a a3       	std	Y+34, r25	; 0x22
    1420:	89 a3       	std	Y+33, r24	; 0x21
    1422:	3f c0       	rjmp	.+126    	; 0x14a2 <SetPinValue_test+0x376>
	else if (__tmp > 65535)
    1424:	6b a1       	ldd	r22, Y+35	; 0x23
    1426:	7c a1       	ldd	r23, Y+36	; 0x24
    1428:	8d a1       	ldd	r24, Y+37	; 0x25
    142a:	9e a1       	ldd	r25, Y+38	; 0x26
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	4f e7       	ldi	r20, 0x7F	; 127
    1432:	57 e4       	ldi	r21, 0x47	; 71
    1434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1438:	18 16       	cp	r1, r24
    143a:	4c f5       	brge	.+82     	; 0x148e <SetPinValue_test+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143c:	6f a1       	ldd	r22, Y+39	; 0x27
    143e:	78 a5       	ldd	r23, Y+40	; 0x28
    1440:	89 a5       	ldd	r24, Y+41	; 0x29
    1442:	9a a5       	ldd	r25, Y+42	; 0x2a
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e2       	ldi	r20, 0x20	; 32
    144a:	51 e4       	ldi	r21, 0x41	; 65
    144c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	bc 01       	movw	r22, r24
    1456:	cd 01       	movw	r24, r26
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9a a3       	std	Y+34, r25	; 0x22
    1462:	89 a3       	std	Y+33, r24	; 0x21
    1464:	0f c0       	rjmp	.+30     	; 0x1484 <SetPinValue_test+0x358>
    1466:	88 ec       	ldi	r24, 0xC8	; 200
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	98 a3       	std	Y+32, r25	; 0x20
    146c:	8f 8f       	std	Y+31, r24	; 0x1f
    146e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1470:	98 a1       	ldd	r25, Y+32	; 0x20
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <SetPinValue_test+0x346>
    1476:	98 a3       	std	Y+32, r25	; 0x20
    1478:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147a:	89 a1       	ldd	r24, Y+33	; 0x21
    147c:	9a a1       	ldd	r25, Y+34	; 0x22
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	9a a3       	std	Y+34, r25	; 0x22
    1482:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1484:	89 a1       	ldd	r24, Y+33	; 0x21
    1486:	9a a1       	ldd	r25, Y+34	; 0x22
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	69 f7       	brne	.-38     	; 0x1466 <SetPinValue_test+0x33a>
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <SetPinValue_test+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148e:	6b a1       	ldd	r22, Y+35	; 0x23
    1490:	7c a1       	ldd	r23, Y+36	; 0x24
    1492:	8d a1       	ldd	r24, Y+37	; 0x25
    1494:	9e a1       	ldd	r25, Y+38	; 0x26
    1496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9a a3       	std	Y+34, r25	; 0x22
    14a0:	89 a3       	std	Y+33, r24	; 0x21
    14a2:	89 a1       	ldd	r24, Y+33	; 0x21
    14a4:	9a a1       	ldd	r25, Y+34	; 0x22
    14a6:	9e 8f       	std	Y+30, r25	; 0x1e
    14a8:	8d 8f       	std	Y+29, r24	; 0x1d
    14aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <SetPinValue_test+0x382>
    14b2:	9e 8f       	std	Y+30, r25	; 0x1e
    14b4:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			if(error!=0)
    14b6:	fe 01       	movw	r30, r28
    14b8:	e8 5b       	subi	r30, 0xB8	; 184
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	80 81       	ld	r24, Z
    14be:	88 23       	and	r24, r24
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <SetPinValue_test+0x398>
    14c2:	7c c0       	rjmp	.+248    	; 0x15bc <SetPinValue_test+0x490>
			{
				SetPinValue(portD,Pin4,High);
    14c4:	83 e0       	ldi	r24, 0x03	; 3
    14c6:	64 e0       	ldi	r22, 0x04	; 4
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	aa e7       	ldi	r26, 0x7A	; 122
    14d4:	b4 e4       	ldi	r27, 0x44	; 68
    14d6:	89 8f       	std	Y+25, r24	; 0x19
    14d8:	9a 8f       	std	Y+26, r25	; 0x1a
    14da:	ab 8f       	std	Y+27, r26	; 0x1b
    14dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	69 8d       	ldd	r22, Y+25	; 0x19
    14e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a ef       	ldi	r20, 0xFA	; 250
    14ec:	54 e4       	ldi	r21, 0x44	; 68
    14ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8d 8b       	std	Y+21, r24	; 0x15
    14f8:	9e 8b       	std	Y+22, r25	; 0x16
    14fa:	af 8b       	std	Y+23, r26	; 0x17
    14fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1500:	7e 89       	ldd	r23, Y+22	; 0x16
    1502:	8f 89       	ldd	r24, Y+23	; 0x17
    1504:	98 8d       	ldd	r25, Y+24	; 0x18
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <SetPinValue_test+0x3f4>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c 8b       	std	Y+20, r25	; 0x14
    151c:	8b 8b       	std	Y+19, r24	; 0x13
    151e:	3f c0       	rjmp	.+126    	; 0x159e <SetPinValue_test+0x472>
	else if (__tmp > 65535)
    1520:	6d 89       	ldd	r22, Y+21	; 0x15
    1522:	7e 89       	ldd	r23, Y+22	; 0x16
    1524:	8f 89       	ldd	r24, Y+23	; 0x17
    1526:	98 8d       	ldd	r25, Y+24	; 0x18
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <SetPinValue_test+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	69 8d       	ldd	r22, Y+25	; 0x19
    153a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9c 8b       	std	Y+20, r25	; 0x14
    155e:	8b 8b       	std	Y+19, r24	; 0x13
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <SetPinValue_test+0x454>
    1562:	88 ec       	ldi	r24, 0xC8	; 200
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9a 8b       	std	Y+18, r25	; 0x12
    1568:	89 8b       	std	Y+17, r24	; 0x11
    156a:	89 89       	ldd	r24, Y+17	; 0x11
    156c:	9a 89       	ldd	r25, Y+18	; 0x12
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <SetPinValue_test+0x442>
    1572:	9a 8b       	std	Y+18, r25	; 0x12
    1574:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8b 89       	ldd	r24, Y+19	; 0x13
    1578:	9c 89       	ldd	r25, Y+20	; 0x14
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8b 89       	ldd	r24, Y+19	; 0x13
    1582:	9c 89       	ldd	r25, Y+20	; 0x14
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <SetPinValue_test+0x436>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <SetPinValue_test+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6d 89       	ldd	r22, Y+21	; 0x15
    158c:	7e 89       	ldd	r23, Y+22	; 0x16
    158e:	8f 89       	ldd	r24, Y+23	; 0x17
    1590:	98 8d       	ldd	r25, Y+24	; 0x18
    1592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9c 8b       	std	Y+20, r25	; 0x14
    159c:	8b 8b       	std	Y+19, r24	; 0x13
    159e:	8b 89       	ldd	r24, Y+19	; 0x13
    15a0:	9c 89       	ldd	r25, Y+20	; 0x14
    15a2:	98 8b       	std	Y+16, r25	; 0x10
    15a4:	8f 87       	std	Y+15, r24	; 0x0f
    15a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a8:	98 89       	ldd	r25, Y+16	; 0x10
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <SetPinValue_test+0x47e>
    15ae:	98 8b       	std	Y+16, r25	; 0x10
    15b0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				SetPinValue(portD,Pin4,Low);
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	64 e0       	ldi	r22, 0x04	; 4
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		SetPinValue(portD,Pin4,Low);
	}
	else
	{
		u8 counter;
		for(counter=0;counter<9;counter++)
    15bc:	de 01       	movw	r26, r28
    15be:	a9 5b       	subi	r26, 0xB9	; 185
    15c0:	bf 4f       	sbci	r27, 0xFF	; 255
    15c2:	fe 01       	movw	r30, r28
    15c4:	e9 5b       	subi	r30, 0xB9	; 185
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	8c 93       	st	X, r24
    15ce:	fe 01       	movw	r30, r28
    15d0:	e9 5b       	subi	r30, 0xB9	; 185
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	89 30       	cpi	r24, 0x09	; 9
    15d8:	08 f4       	brcc	.+2      	; 0x15dc <SetPinValue_test+0x4b0>
    15da:	6b ce       	rjmp	.-810    	; 0x12b2 <SetPinValue_test+0x186>
				_delay_ms(1000);
				SetPinValue(portD,Pin4,Low);
			}
		}
		//checking for invalid value
		error=SetPinValue(port,4,2);
    15dc:	fe 01       	movw	r30, r28
    15de:	e7 5b       	subi	r30, 0xB7	; 183
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	64 e0       	ldi	r22, 0x04	; 4
    15e6:	42 e0       	ldi	r20, 0x02	; 2
    15e8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    15ec:	fe 01       	movw	r30, r28
    15ee:	e8 5b       	subi	r30, 0xB8	; 184
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	80 83       	st	Z, r24
		if(error!=0)
    15f4:	fe 01       	movw	r30, r28
    15f6:	e8 5b       	subi	r30, 0xB8	; 184
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	80 81       	ld	r24, Z
    15fc:	88 23       	and	r24, r24
    15fe:	09 f4       	brne	.+2      	; 0x1602 <SetPinValue_test+0x4d6>
    1600:	7c c0       	rjmp	.+248    	; 0x16fa <SetPinValue_test+0x5ce>
		{
			SetPinValue(portD,Pin4,High);
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	64 e0       	ldi	r22, 0x04	; 4
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	aa e7       	ldi	r26, 0x7A	; 122
    1612:	b4 e4       	ldi	r27, 0x44	; 68
    1614:	8b 87       	std	Y+11, r24	; 0x0b
    1616:	9c 87       	std	Y+12, r25	; 0x0c
    1618:	ad 87       	std	Y+13, r26	; 0x0d
    161a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    161c:	6b 85       	ldd	r22, Y+11	; 0x0b
    161e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1620:	8d 85       	ldd	r24, Y+13	; 0x0d
    1622:	9e 85       	ldd	r25, Y+14	; 0x0e
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	4a ef       	ldi	r20, 0xFA	; 250
    162a:	54 e4       	ldi	r21, 0x44	; 68
    162c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	8f 83       	std	Y+7, r24	; 0x07
    1636:	98 87       	std	Y+8, r25	; 0x08
    1638:	a9 87       	std	Y+9, r26	; 0x09
    163a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    163c:	6f 81       	ldd	r22, Y+7	; 0x07
    163e:	78 85       	ldd	r23, Y+8	; 0x08
    1640:	89 85       	ldd	r24, Y+9	; 0x09
    1642:	9a 85       	ldd	r25, Y+10	; 0x0a
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e8       	ldi	r20, 0x80	; 128
    164a:	5f e3       	ldi	r21, 0x3F	; 63
    164c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1650:	88 23       	and	r24, r24
    1652:	2c f4       	brge	.+10     	; 0x165e <SetPinValue_test+0x532>
		__ticks = 1;
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	3f c0       	rjmp	.+126    	; 0x16dc <SetPinValue_test+0x5b0>
	else if (__tmp > 65535)
    165e:	6f 81       	ldd	r22, Y+7	; 0x07
    1660:	78 85       	ldd	r23, Y+8	; 0x08
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	9a 85       	ldd	r25, Y+10	; 0x0a
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	3f ef       	ldi	r19, 0xFF	; 255
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	57 e4       	ldi	r21, 0x47	; 71
    166e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	4c f5       	brge	.+82     	; 0x16c8 <SetPinValue_test+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1676:	6b 85       	ldd	r22, Y+11	; 0x0b
    1678:	7c 85       	ldd	r23, Y+12	; 0x0c
    167a:	8d 85       	ldd	r24, Y+13	; 0x0d
    167c:	9e 85       	ldd	r25, Y+14	; 0x0e
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e2       	ldi	r20, 0x20	; 32
    1684:	51 e4       	ldi	r21, 0x41	; 65
    1686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	0f c0       	rjmp	.+30     	; 0x16be <SetPinValue_test+0x592>
    16a0:	88 ec       	ldi	r24, 0xC8	; 200
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	8b 83       	std	Y+3, r24	; 0x03
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <SetPinValue_test+0x580>
    16b0:	9c 83       	std	Y+4, r25	; 0x04
    16b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <SetPinValue_test+0x574>
    16c6:	14 c0       	rjmp	.+40     	; 0x16f0 <SetPinValue_test+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	9e 83       	std	Y+6, r25	; 0x06
    16da:	8d 83       	std	Y+5, r24	; 0x05
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	9e 81       	ldd	r25, Y+6	; 0x06
    16e0:	9a 83       	std	Y+2, r25	; 0x02
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <SetPinValue_test+0x5bc>
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			SetPinValue(portD,Pin4,Low);
    16f0:	83 e0       	ldi	r24, 0x03	; 3
    16f2:	64 e0       	ldi	r22, 0x04	; 4
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		}
	}
}
    16fa:	c7 5b       	subi	r28, 0xB7	; 183
    16fc:	df 4f       	sbci	r29, 0xFF	; 255
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <togglePin_test>:

void togglePin_test(u8 port)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	eb 97       	sbiw	r28, 0x3b	; 59
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	8b af       	std	Y+59, r24	; 0x3b
	//checking for valid values
	SetPinDirection(portD,Pin4,Output);
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	64 e0       	ldi	r22, 0x04	; 4
    172c:	41 e0       	ldi	r20, 0x01	; 1
    172e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
	u8 error=9;
    1732:	89 e0       	ldi	r24, 0x09	; 9
    1734:	8a af       	std	Y+58, r24	; 0x3a
	error=togglePin(port,0);
    1736:	8b ad       	ldd	r24, Y+59	; 0x3b
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
    173e:	8a af       	std	Y+58, r24	; 0x3a
	if(error!=0)
    1740:	8a ad       	ldd	r24, Y+58	; 0x3a
    1742:	88 23       	and	r24, r24
    1744:	09 f4       	brne	.+2      	; 0x1748 <togglePin_test+0x36>
    1746:	7d c0       	rjmp	.+250    	; 0x1842 <togglePin_test+0x130>
	{
		SetPinValue(portD,Pin4,High);
    1748:	83 e0       	ldi	r24, 0x03	; 3
    174a:	64 e0       	ldi	r22, 0x04	; 4
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	aa e7       	ldi	r26, 0x7A	; 122
    1758:	b4 e4       	ldi	r27, 0x44	; 68
    175a:	8d ab       	std	Y+53, r24	; 0x35
    175c:	9e ab       	std	Y+54, r25	; 0x36
    175e:	af ab       	std	Y+55, r26	; 0x37
    1760:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1762:	6d a9       	ldd	r22, Y+53	; 0x35
    1764:	7e a9       	ldd	r23, Y+54	; 0x36
    1766:	8f a9       	ldd	r24, Y+55	; 0x37
    1768:	98 ad       	ldd	r25, Y+56	; 0x38
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a ef       	ldi	r20, 0xFA	; 250
    1770:	54 e4       	ldi	r21, 0x44	; 68
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	89 ab       	std	Y+49, r24	; 0x31
    177c:	9a ab       	std	Y+50, r25	; 0x32
    177e:	ab ab       	std	Y+51, r26	; 0x33
    1780:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1782:	69 a9       	ldd	r22, Y+49	; 0x31
    1784:	7a a9       	ldd	r23, Y+50	; 0x32
    1786:	8b a9       	ldd	r24, Y+51	; 0x33
    1788:	9c a9       	ldd	r25, Y+52	; 0x34
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1796:	88 23       	and	r24, r24
    1798:	2c f4       	brge	.+10     	; 0x17a4 <togglePin_test+0x92>
		__ticks = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	98 ab       	std	Y+48, r25	; 0x30
    17a0:	8f a7       	std	Y+47, r24	; 0x2f
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <togglePin_test+0x110>
	else if (__tmp > 65535)
    17a4:	69 a9       	ldd	r22, Y+49	; 0x31
    17a6:	7a a9       	ldd	r23, Y+50	; 0x32
    17a8:	8b a9       	ldd	r24, Y+51	; 0x33
    17aa:	9c a9       	ldd	r25, Y+52	; 0x34
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	4c f5       	brge	.+82     	; 0x180e <togglePin_test+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17bc:	6d a9       	ldd	r22, Y+53	; 0x35
    17be:	7e a9       	ldd	r23, Y+54	; 0x36
    17c0:	8f a9       	ldd	r24, Y+55	; 0x37
    17c2:	98 ad       	ldd	r25, Y+56	; 0x38
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <togglePin_test+0xf2>
    17e6:	88 ec       	ldi	r24, 0xC8	; 200
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9e a7       	std	Y+46, r25	; 0x2e
    17ec:	8d a7       	std	Y+45, r24	; 0x2d
    17ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    17f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <togglePin_test+0xe0>
    17f6:	9e a7       	std	Y+46, r25	; 0x2e
    17f8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    17fc:	98 a9       	ldd	r25, Y+48	; 0x30
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	98 ab       	std	Y+48, r25	; 0x30
    1802:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	8f a5       	ldd	r24, Y+47	; 0x2f
    1806:	98 a9       	ldd	r25, Y+48	; 0x30
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	69 f7       	brne	.-38     	; 0x17e6 <togglePin_test+0xd4>
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <togglePin_test+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	69 a9       	ldd	r22, Y+49	; 0x31
    1810:	7a a9       	ldd	r23, Y+50	; 0x32
    1812:	8b a9       	ldd	r24, Y+51	; 0x33
    1814:	9c a9       	ldd	r25, Y+52	; 0x34
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	98 ab       	std	Y+48, r25	; 0x30
    1820:	8f a7       	std	Y+47, r24	; 0x2f
    1822:	8f a5       	ldd	r24, Y+47	; 0x2f
    1824:	98 a9       	ldd	r25, Y+48	; 0x30
    1826:	9c a7       	std	Y+44, r25	; 0x2c
    1828:	8b a7       	std	Y+43, r24	; 0x2b
    182a:	8b a5       	ldd	r24, Y+43	; 0x2b
    182c:	9c a5       	ldd	r25, Y+44	; 0x2c
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <togglePin_test+0x11c>
    1832:	9c a7       	std	Y+44, r25	; 0x2c
    1834:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		SetPinValue(portD,Pin4,Low);
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	64 e0       	ldi	r22, 0x04	; 4
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1840:	77 c1       	rjmp	.+750    	; 0x1b30 <togglePin_test+0x41e>
	}
	else
	{
		u8 counter;
		for(counter=0;counter<9;counter++)
    1842:	19 ae       	std	Y+57, r1	; 0x39
    1844:	71 c1       	rjmp	.+738    	; 0x1b28 <togglePin_test+0x416>
		{
			error=togglePin(port,counter);
    1846:	8b ad       	ldd	r24, Y+59	; 0x3b
    1848:	69 ad       	ldd	r22, Y+57	; 0x39
    184a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
    184e:	8a af       	std	Y+58, r24	; 0x3a
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	aa e7       	ldi	r26, 0x7A	; 122
    1856:	b4 e4       	ldi	r27, 0x44	; 68
    1858:	8f a3       	std	Y+39, r24	; 0x27
    185a:	98 a7       	std	Y+40, r25	; 0x28
    185c:	a9 a7       	std	Y+41, r26	; 0x29
    185e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1860:	6f a1       	ldd	r22, Y+39	; 0x27
    1862:	78 a5       	ldd	r23, Y+40	; 0x28
    1864:	89 a5       	ldd	r24, Y+41	; 0x29
    1866:	9a a5       	ldd	r25, Y+42	; 0x2a
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	4a ef       	ldi	r20, 0xFA	; 250
    186e:	54 e4       	ldi	r21, 0x44	; 68
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	8b a3       	std	Y+35, r24	; 0x23
    187a:	9c a3       	std	Y+36, r25	; 0x24
    187c:	ad a3       	std	Y+37, r26	; 0x25
    187e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1880:	6b a1       	ldd	r22, Y+35	; 0x23
    1882:	7c a1       	ldd	r23, Y+36	; 0x24
    1884:	8d a1       	ldd	r24, Y+37	; 0x25
    1886:	9e a1       	ldd	r25, Y+38	; 0x26
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e8       	ldi	r20, 0x80	; 128
    188e:	5f e3       	ldi	r21, 0x3F	; 63
    1890:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1894:	88 23       	and	r24, r24
    1896:	2c f4       	brge	.+10     	; 0x18a2 <togglePin_test+0x190>
		__ticks = 1;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9a a3       	std	Y+34, r25	; 0x22
    189e:	89 a3       	std	Y+33, r24	; 0x21
    18a0:	3f c0       	rjmp	.+126    	; 0x1920 <togglePin_test+0x20e>
	else if (__tmp > 65535)
    18a2:	6b a1       	ldd	r22, Y+35	; 0x23
    18a4:	7c a1       	ldd	r23, Y+36	; 0x24
    18a6:	8d a1       	ldd	r24, Y+37	; 0x25
    18a8:	9e a1       	ldd	r25, Y+38	; 0x26
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
    18ae:	4f e7       	ldi	r20, 0x7F	; 127
    18b0:	57 e4       	ldi	r21, 0x47	; 71
    18b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b6:	18 16       	cp	r1, r24
    18b8:	4c f5       	brge	.+82     	; 0x190c <togglePin_test+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	6f a1       	ldd	r22, Y+39	; 0x27
    18bc:	78 a5       	ldd	r23, Y+40	; 0x28
    18be:	89 a5       	ldd	r24, Y+41	; 0x29
    18c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9a a3       	std	Y+34, r25	; 0x22
    18e0:	89 a3       	std	Y+33, r24	; 0x21
    18e2:	0f c0       	rjmp	.+30     	; 0x1902 <togglePin_test+0x1f0>
    18e4:	88 ec       	ldi	r24, 0xC8	; 200
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	98 a3       	std	Y+32, r25	; 0x20
    18ea:	8f 8f       	std	Y+31, r24	; 0x1f
    18ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ee:	98 a1       	ldd	r25, Y+32	; 0x20
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <togglePin_test+0x1de>
    18f4:	98 a3       	std	Y+32, r25	; 0x20
    18f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f8:	89 a1       	ldd	r24, Y+33	; 0x21
    18fa:	9a a1       	ldd	r25, Y+34	; 0x22
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	9a a3       	std	Y+34, r25	; 0x22
    1900:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1902:	89 a1       	ldd	r24, Y+33	; 0x21
    1904:	9a a1       	ldd	r25, Y+34	; 0x22
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	69 f7       	brne	.-38     	; 0x18e4 <togglePin_test+0x1d2>
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <togglePin_test+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190c:	6b a1       	ldd	r22, Y+35	; 0x23
    190e:	7c a1       	ldd	r23, Y+36	; 0x24
    1910:	8d a1       	ldd	r24, Y+37	; 0x25
    1912:	9e a1       	ldd	r25, Y+38	; 0x26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9a a3       	std	Y+34, r25	; 0x22
    191e:	89 a3       	std	Y+33, r24	; 0x21
    1920:	89 a1       	ldd	r24, Y+33	; 0x21
    1922:	9a a1       	ldd	r25, Y+34	; 0x22
    1924:	9e 8f       	std	Y+30, r25	; 0x1e
    1926:	8d 8f       	std	Y+29, r24	; 0x1d
    1928:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <togglePin_test+0x21a>
    1930:	9e 8f       	std	Y+30, r25	; 0x1e
    1932:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			error=togglePin(port,counter);
    1934:	8b ad       	ldd	r24, Y+59	; 0x3b
    1936:	69 ad       	ldd	r22, Y+57	; 0x39
    1938:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
    193c:	8a af       	std	Y+58, r24	; 0x3a
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	aa e7       	ldi	r26, 0x7A	; 122
    1944:	b4 e4       	ldi	r27, 0x44	; 68
    1946:	89 8f       	std	Y+25, r24	; 0x19
    1948:	9a 8f       	std	Y+26, r25	; 0x1a
    194a:	ab 8f       	std	Y+27, r26	; 0x1b
    194c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	69 8d       	ldd	r22, Y+25	; 0x19
    1950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a ef       	ldi	r20, 0xFA	; 250
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8d 8b       	std	Y+21, r24	; 0x15
    1968:	9e 8b       	std	Y+22, r25	; 0x16
    196a:	af 8b       	std	Y+23, r26	; 0x17
    196c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    196e:	6d 89       	ldd	r22, Y+21	; 0x15
    1970:	7e 89       	ldd	r23, Y+22	; 0x16
    1972:	8f 89       	ldd	r24, Y+23	; 0x17
    1974:	98 8d       	ldd	r25, Y+24	; 0x18
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <togglePin_test+0x27e>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9c 8b       	std	Y+20, r25	; 0x14
    198c:	8b 8b       	std	Y+19, r24	; 0x13
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <togglePin_test+0x2fc>
	else if (__tmp > 65535)
    1990:	6d 89       	ldd	r22, Y+21	; 0x15
    1992:	7e 89       	ldd	r23, Y+22	; 0x16
    1994:	8f 89       	ldd	r24, Y+23	; 0x17
    1996:	98 8d       	ldd	r25, Y+24	; 0x18
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <togglePin_test+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	69 8d       	ldd	r22, Y+25	; 0x19
    19aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <togglePin_test+0x2de>
    19d2:	88 ec       	ldi	r24, 0xC8	; 200
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9a 8b       	std	Y+18, r25	; 0x12
    19d8:	89 8b       	std	Y+17, r24	; 0x11
    19da:	89 89       	ldd	r24, Y+17	; 0x11
    19dc:	9a 89       	ldd	r25, Y+18	; 0x12
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <togglePin_test+0x2cc>
    19e2:	9a 8b       	std	Y+18, r25	; 0x12
    19e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9c 8b       	std	Y+20, r25	; 0x14
    19ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	8b 89       	ldd	r24, Y+19	; 0x13
    19f2:	9c 89       	ldd	r25, Y+20	; 0x14
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <togglePin_test+0x2c0>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <togglePin_test+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	6d 89       	ldd	r22, Y+21	; 0x15
    19fc:	7e 89       	ldd	r23, Y+22	; 0x16
    19fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1a00:	98 8d       	ldd	r25, Y+24	; 0x18
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	98 8b       	std	Y+16, r25	; 0x10
    1a14:	8f 87       	std	Y+15, r24	; 0x0f
    1a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a18:	98 89       	ldd	r25, Y+16	; 0x10
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <togglePin_test+0x308>
    1a1e:	98 8b       	std	Y+16, r25	; 0x10
    1a20:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			if(error!=0)
    1a22:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a24:	88 23       	and	r24, r24
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <togglePin_test+0x318>
    1a28:	7c c0       	rjmp	.+248    	; 0x1b22 <togglePin_test+0x410>
			{
				SetPinValue(portD,Pin4,High);
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	64 e0       	ldi	r22, 0x04	; 4
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	aa e7       	ldi	r26, 0x7A	; 122
    1a3a:	b4 e4       	ldi	r27, 0x44	; 68
    1a3c:	8b 87       	std	Y+11, r24	; 0x0b
    1a3e:	9c 87       	std	Y+12, r25	; 0x0c
    1a40:	ad 87       	std	Y+13, r26	; 0x0d
    1a42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a ef       	ldi	r20, 0xFA	; 250
    1a52:	54 e4       	ldi	r21, 0x44	; 68
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8f 83       	std	Y+7, r24	; 0x07
    1a5e:	98 87       	std	Y+8, r25	; 0x08
    1a60:	a9 87       	std	Y+9, r26	; 0x09
    1a62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a64:	6f 81       	ldd	r22, Y+7	; 0x07
    1a66:	78 85       	ldd	r23, Y+8	; 0x08
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <togglePin_test+0x374>
		__ticks = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
    1a84:	3f c0       	rjmp	.+126    	; 0x1b04 <togglePin_test+0x3f2>
	else if (__tmp > 65535)
    1a86:	6f 81       	ldd	r22, Y+7	; 0x07
    1a88:	78 85       	ldd	r23, Y+8	; 0x08
    1a8a:	89 85       	ldd	r24, Y+9	; 0x09
    1a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	4c f5       	brge	.+82     	; 0x1af0 <togglePin_test+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <togglePin_test+0x3d4>
    1ac8:	88 ec       	ldi	r24, 0xC8	; 200
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	8b 83       	std	Y+3, r24	; 0x03
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <togglePin_test+0x3c2>
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <togglePin_test+0x3b6>
    1aee:	14 c0       	rjmp	.+40     	; 0x1b18 <togglePin_test+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	89 83       	std	Y+1, r24	; 0x01
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <togglePin_test+0x3fe>
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				SetPinValue(portD,Pin4,Low);
    1b18:	83 e0       	ldi	r24, 0x03	; 3
    1b1a:	64 e0       	ldi	r22, 0x04	; 4
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		SetPinValue(portD,Pin4,Low);
	}
	else
	{
		u8 counter;
		for(counter=0;counter<9;counter++)
    1b22:	89 ad       	ldd	r24, Y+57	; 0x39
    1b24:	8f 5f       	subi	r24, 0xFF	; 255
    1b26:	89 af       	std	Y+57, r24	; 0x39
    1b28:	89 ad       	ldd	r24, Y+57	; 0x39
    1b2a:	89 30       	cpi	r24, 0x09	; 9
    1b2c:	08 f4       	brcc	.+2      	; 0x1b30 <togglePin_test+0x41e>
    1b2e:	8b ce       	rjmp	.-746    	; 0x1846 <togglePin_test+0x134>
				_delay_ms(1000);
				SetPinValue(portD,Pin4,Low);
			}
		}
	}
}
    1b30:	eb 96       	adiw	r28, 0x3b	; 59
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <EXT_Int_test>:


void EXT_Int_test(u8 int_num)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	eb 97       	sbiw	r28, 0x3b	; 59
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	8b af       	std	Y+59, r24	; 0x3b
	SetPinDirection(portD,Pin4,Output);
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	64 e0       	ldi	r22, 0x04	; 4
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
	GIEnable();
    1b62:	0e 94 07 11 	call	0x220e	; 0x220e <GIEnable>
	u8 error =INT_ControlSense(int_num,Falling_Edge);
    1b66:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b68:	63 e0       	ldi	r22, 0x03	; 3
    1b6a:	0e 94 35 11 	call	0x226a	; 0x226a <INT_ControlSense>
    1b6e:	8a af       	std	Y+58, r24	; 0x3a
	if(error!=0)
    1b70:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b72:	88 23       	and	r24, r24
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <EXT_Int_test+0x36>
    1b76:	7d c0       	rjmp	.+250    	; 0x1c72 <EXT_Int_test+0x130>
	{
		SetPinValue(portD,Pin4,High);
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	64 e0       	ldi	r22, 0x04	; 4
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	aa e7       	ldi	r26, 0x7A	; 122
    1b88:	b4 e4       	ldi	r27, 0x44	; 68
    1b8a:	8d ab       	std	Y+53, r24	; 0x35
    1b8c:	9e ab       	std	Y+54, r25	; 0x36
    1b8e:	af ab       	std	Y+55, r26	; 0x37
    1b90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b92:	6d a9       	ldd	r22, Y+53	; 0x35
    1b94:	7e a9       	ldd	r23, Y+54	; 0x36
    1b96:	8f a9       	ldd	r24, Y+55	; 0x37
    1b98:	98 ad       	ldd	r25, Y+56	; 0x38
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ba0:	54 e4       	ldi	r21, 0x44	; 68
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	89 ab       	std	Y+49, r24	; 0x31
    1bac:	9a ab       	std	Y+50, r25	; 0x32
    1bae:	ab ab       	std	Y+51, r26	; 0x33
    1bb0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e8       	ldi	r20, 0x80	; 128
    1bc0:	5f e3       	ldi	r21, 0x3F	; 63
    1bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc6:	88 23       	and	r24, r24
    1bc8:	2c f4       	brge	.+10     	; 0x1bd4 <EXT_Int_test+0x92>
		__ticks = 1;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	98 ab       	std	Y+48, r25	; 0x30
    1bd0:	8f a7       	std	Y+47, r24	; 0x2f
    1bd2:	3f c0       	rjmp	.+126    	; 0x1c52 <EXT_Int_test+0x110>
	else if (__tmp > 65535)
    1bd4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bd6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bd8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bda:	9c a9       	ldd	r25, Y+52	; 0x34
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	3f ef       	ldi	r19, 0xFF	; 255
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	57 e4       	ldi	r21, 0x47	; 71
    1be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be8:	18 16       	cp	r1, r24
    1bea:	4c f5       	brge	.+82     	; 0x1c3e <EXT_Int_test+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bec:	6d a9       	ldd	r22, Y+53	; 0x35
    1bee:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	98 ab       	std	Y+48, r25	; 0x30
    1c12:	8f a7       	std	Y+47, r24	; 0x2f
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <EXT_Int_test+0xf2>
    1c16:	88 ec       	ldi	r24, 0xC8	; 200
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9e a7       	std	Y+46, r25	; 0x2e
    1c1c:	8d a7       	std	Y+45, r24	; 0x2d
    1c1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c20:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <EXT_Int_test+0xe0>
    1c26:	9e a7       	std	Y+46, r25	; 0x2e
    1c28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	98 ab       	std	Y+48, r25	; 0x30
    1c32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c36:	98 a9       	ldd	r25, Y+48	; 0x30
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	69 f7       	brne	.-38     	; 0x1c16 <EXT_Int_test+0xd4>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <EXT_Int_test+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c40:	7a a9       	ldd	r23, Y+50	; 0x32
    1c42:	8b a9       	ldd	r24, Y+51	; 0x33
    1c44:	9c a9       	ldd	r25, Y+52	; 0x34
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	98 ab       	std	Y+48, r25	; 0x30
    1c50:	8f a7       	std	Y+47, r24	; 0x2f
    1c52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c54:	98 a9       	ldd	r25, Y+48	; 0x30
    1c56:	9c a7       	std	Y+44, r25	; 0x2c
    1c58:	8b a7       	std	Y+43, r24	; 0x2b
    1c5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <EXT_Int_test+0x11c>
    1c62:	9c a7       	std	Y+44, r25	; 0x2c
    1c64:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		SetPinValue(portD,Pin4,Low);
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	64 e0       	ldi	r22, 0x04	; 4
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1c70:	00 c1       	rjmp	.+512    	; 0x1e72 <EXT_Int_test+0x330>
	}
	else
	{
		u8 counter;
		for(counter=0;counter<6;counter++)
    1c72:	19 ae       	std	Y+57, r1	; 0x39
    1c74:	fa c0       	rjmp	.+500    	; 0x1e6a <EXT_Int_test+0x328>
		{
			error=INT_ControlSense(int_num,counter);
    1c76:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c78:	69 ad       	ldd	r22, Y+57	; 0x39
    1c7a:	0e 94 35 11 	call	0x226a	; 0x226a <INT_ControlSense>
    1c7e:	8a af       	std	Y+58, r24	; 0x3a
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	aa e7       	ldi	r26, 0x7A	; 122
    1c86:	b4 e4       	ldi	r27, 0x44	; 68
    1c88:	8f a3       	std	Y+39, r24	; 0x27
    1c8a:	98 a7       	std	Y+40, r25	; 0x28
    1c8c:	a9 a7       	std	Y+41, r26	; 0x29
    1c8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	6f a1       	ldd	r22, Y+39	; 0x27
    1c92:	78 a5       	ldd	r23, Y+40	; 0x28
    1c94:	89 a5       	ldd	r24, Y+41	; 0x29
    1c96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a ef       	ldi	r20, 0xFA	; 250
    1c9e:	54 e4       	ldi	r21, 0x44	; 68
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	8b a3       	std	Y+35, r24	; 0x23
    1caa:	9c a3       	std	Y+36, r25	; 0x24
    1cac:	ad a3       	std	Y+37, r26	; 0x25
    1cae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <EXT_Int_test+0x190>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9a a3       	std	Y+34, r25	; 0x22
    1cce:	89 a3       	std	Y+33, r24	; 0x21
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <EXT_Int_test+0x20e>
	else if (__tmp > 65535)
    1cd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	4c f5       	brge	.+82     	; 0x1d3c <EXT_Int_test+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	6f a1       	ldd	r22, Y+39	; 0x27
    1cec:	78 a5       	ldd	r23, Y+40	; 0x28
    1cee:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9a a3       	std	Y+34, r25	; 0x22
    1d10:	89 a3       	std	Y+33, r24	; 0x21
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <EXT_Int_test+0x1f0>
    1d14:	88 ec       	ldi	r24, 0xC8	; 200
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	98 a3       	std	Y+32, r25	; 0x20
    1d1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <EXT_Int_test+0x1de>
    1d24:	98 a3       	std	Y+32, r25	; 0x20
    1d26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9a a3       	std	Y+34, r25	; 0x22
    1d30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	89 a1       	ldd	r24, Y+33	; 0x21
    1d34:	9a a1       	ldd	r25, Y+34	; 0x22
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <EXT_Int_test+0x1d2>
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <EXT_Int_test+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d40:	8d a1       	ldd	r24, Y+37	; 0x25
    1d42:	9e a1       	ldd	r25, Y+38	; 0x26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9a a3       	std	Y+34, r25	; 0x22
    1d4e:	89 a3       	std	Y+33, r24	; 0x21
    1d50:	89 a1       	ldd	r24, Y+33	; 0x21
    1d52:	9a a1       	ldd	r25, Y+34	; 0x22
    1d54:	9e 8f       	std	Y+30, r25	; 0x1e
    1d56:	8d 8f       	std	Y+29, r24	; 0x1d
    1d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <EXT_Int_test+0x21a>
    1d60:	9e 8f       	std	Y+30, r25	; 0x1e
    1d62:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			if(error!=0)
    1d64:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <EXT_Int_test+0x22a>
    1d6a:	7c c0       	rjmp	.+248    	; 0x1e64 <EXT_Int_test+0x322>
			{
				SetPinValue(portD,Pin4,High);
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	64 e0       	ldi	r22, 0x04	; 4
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	aa e7       	ldi	r26, 0x7A	; 122
    1d7c:	b4 e4       	ldi	r27, 0x44	; 68
    1d7e:	89 8f       	std	Y+25, r24	; 0x19
    1d80:	9a 8f       	std	Y+26, r25	; 0x1a
    1d82:	ab 8f       	std	Y+27, r26	; 0x1b
    1d84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	69 8d       	ldd	r22, Y+25	; 0x19
    1d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a ef       	ldi	r20, 0xFA	; 250
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8d 8b       	std	Y+21, r24	; 0x15
    1da0:	9e 8b       	std	Y+22, r25	; 0x16
    1da2:	af 8b       	std	Y+23, r26	; 0x17
    1da4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da6:	6d 89       	ldd	r22, Y+21	; 0x15
    1da8:	7e 89       	ldd	r23, Y+22	; 0x16
    1daa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dac:	98 8d       	ldd	r25, Y+24	; 0x18
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <EXT_Int_test+0x286>
		__ticks = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9c 8b       	std	Y+20, r25	; 0x14
    1dc4:	8b 8b       	std	Y+19, r24	; 0x13
    1dc6:	3f c0       	rjmp	.+126    	; 0x1e46 <EXT_Int_test+0x304>
	else if (__tmp > 65535)
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	4f e7       	ldi	r20, 0x7F	; 127
    1dd6:	57 e4       	ldi	r21, 0x47	; 71
    1dd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ddc:	18 16       	cp	r1, r24
    1dde:	4c f5       	brge	.+82     	; 0x1e32 <EXT_Int_test+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de0:	69 8d       	ldd	r22, Y+25	; 0x19
    1de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e2       	ldi	r20, 0x20	; 32
    1dee:	51 e4       	ldi	r21, 0x41	; 65
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <EXT_Int_test+0x2e6>
    1e0a:	88 ec       	ldi	r24, 0xC8	; 200
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9a 8b       	std	Y+18, r25	; 0x12
    1e10:	89 8b       	std	Y+17, r24	; 0x11
    1e12:	89 89       	ldd	r24, Y+17	; 0x11
    1e14:	9a 89       	ldd	r25, Y+18	; 0x12
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <EXT_Int_test+0x2d4>
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e20:	9c 89       	ldd	r25, Y+20	; 0x14
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	9c 8b       	std	Y+20, r25	; 0x14
    1e26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	69 f7       	brne	.-38     	; 0x1e0a <EXT_Int_test+0x2c8>
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <EXT_Int_test+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e32:	6d 89       	ldd	r22, Y+21	; 0x15
    1e34:	7e 89       	ldd	r23, Y+22	; 0x16
    1e36:	8f 89       	ldd	r24, Y+23	; 0x17
    1e38:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
    1e46:	8b 89       	ldd	r24, Y+19	; 0x13
    1e48:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4a:	98 8b       	std	Y+16, r25	; 0x10
    1e4c:	8f 87       	std	Y+15, r24	; 0x0f
    1e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e50:	98 89       	ldd	r25, Y+16	; 0x10
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <EXT_Int_test+0x310>
    1e56:	98 8b       	std	Y+16, r25	; 0x10
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				SetPinValue(portD,Pin4,Low);
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	64 e0       	ldi	r22, 0x04	; 4
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		SetPinValue(portD,Pin4,Low);
	}
	else
	{
		u8 counter;
		for(counter=0;counter<6;counter++)
    1e64:	89 ad       	ldd	r24, Y+57	; 0x39
    1e66:	8f 5f       	subi	r24, 0xFF	; 255
    1e68:	89 af       	std	Y+57, r24	; 0x39
    1e6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e6c:	86 30       	cpi	r24, 0x06	; 6
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <EXT_Int_test+0x330>
    1e70:	02 cf       	rjmp	.-508    	; 0x1c76 <EXT_Int_test+0x134>
				_delay_ms(1000);
				SetPinValue(portD,Pin4,Low);
			}
		}
	}
	INT_Enable(int_num);
    1e72:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e74:	0e 94 a5 11 	call	0x234a	; 0x234a <INT_Enable>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	aa e7       	ldi	r26, 0x7A	; 122
    1e7e:	b4 e4       	ldi	r27, 0x44	; 68
    1e80:	8b 87       	std	Y+11, r24	; 0x0b
    1e82:	9c 87       	std	Y+12, r25	; 0x0c
    1e84:	ad 87       	std	Y+13, r26	; 0x0d
    1e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a ef       	ldi	r20, 0xFA	; 250
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8f 83       	std	Y+7, r24	; 0x07
    1ea2:	98 87       	std	Y+8, r25	; 0x08
    1ea4:	a9 87       	std	Y+9, r26	; 0x09
    1ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <EXT_Int_test+0x388>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <EXT_Int_test+0x406>
	else if (__tmp > 65535)
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <EXT_Int_test+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <EXT_Int_test+0x3e8>
    1f0c:	88 ec       	ldi	r24, 0xC8	; 200
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9c 83       	std	Y+4, r25	; 0x04
    1f12:	8b 83       	std	Y+3, r24	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <EXT_Int_test+0x3d6>
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <EXT_Int_test+0x3ca>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <EXT_Int_test+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9e 83       	std	Y+6, r25	; 0x06
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <EXT_Int_test+0x412>
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	INT_Disable(int_num);
    1f5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f5e:	0e 94 ce 11 	call	0x239c	; 0x239c <INT_Disable>
}
    1f62:	eb 96       	adiw	r28, 0x3b	; 59
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <Timer_Init>:
#include "Timer0_Interface.h"

static void (*Timer_func)(void)=Null;

u8 Timer_Init(u8 wgm,u8 clk)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <Timer_Init+0x6>
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <Timer_Init+0x8>
    1f7c:	0f 92       	push	r0
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	6a 83       	std	Y+2, r22	; 0x02
	switch(wgm)
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	3d 83       	std	Y+5, r19	; 0x05
    1f8e:	2c 83       	std	Y+4, r18	; 0x04
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	9d 81       	ldd	r25, Y+5	; 0x05
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	91 05       	cpc	r25, r1
    1f98:	91 f1       	breq	.+100    	; 0x1ffe <Timer_Init+0x8a>
    1f9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f9e:	22 30       	cpi	r18, 0x02	; 2
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <Timer_Init+0x3a>
    1fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	61 f0       	breq	.+24     	; 0x1fc4 <Timer_Init+0x50>
    1fac:	55 c0       	rjmp	.+170    	; 0x2058 <Timer_Init+0xe4>
    1fae:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb2:	22 30       	cpi	r18, 0x02	; 2
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	91 f1       	breq	.+100    	; 0x201c <Timer_Init+0xa8>
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbc:	83 30       	cpi	r24, 0x03	; 3
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	e1 f1       	breq	.+120    	; 0x203a <Timer_Init+0xc6>
    1fc2:	4a c0       	rjmp	.+148    	; 0x2058 <Timer_Init+0xe4>
	{
	case normal_Mode:
		CLR_BIT(Timer_TCCR0,TCCR_WGM0);
    1fc4:	a3 e5       	ldi	r26, 0x53	; 83
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e3 e5       	ldi	r30, 0x53	; 83
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	87 7f       	andi	r24, 0xF7	; 247
    1fd0:	8c 93       	st	X, r24
		CLR_BIT(Timer_TCCR0,TCCR_WGM1);
    1fd2:	a3 e5       	ldi	r26, 0x53	; 83
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e3 e5       	ldi	r30, 0x53	; 83
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8f 7b       	andi	r24, 0xBF	; 191
    1fde:	8c 93       	st	X, r24
		CLR_BIT(Timer_TCCR0,TCCR_COM2);
    1fe0:	a3 e5       	ldi	r26, 0x53	; 83
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e3 e5       	ldi	r30, 0x53	; 83
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	8f 7e       	andi	r24, 0xEF	; 239
    1fec:	8c 93       	st	X, r24
		CLR_BIT(Timer_TCCR0,TCCR_COM1);
    1fee:	a3 e5       	ldi	r26, 0x53	; 83
    1ff0:	b0 e0       	ldi	r27, 0x00	; 0
    1ff2:	e3 e5       	ldi	r30, 0x53	; 83
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	8f 7d       	andi	r24, 0xDF	; 223
    1ffa:	8c 93       	st	X, r24
    1ffc:	30 c0       	rjmp	.+96     	; 0x205e <Timer_Init+0xea>
		break;
	case PWM_Mode:
		CLR_BIT(Timer_TCCR0,TCCR_WGM0);
    1ffe:	a3 e5       	ldi	r26, 0x53	; 83
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e3 e5       	ldi	r30, 0x53	; 83
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	87 7f       	andi	r24, 0xF7	; 247
    200a:	8c 93       	st	X, r24
		SET_BIT(Timer_TCCR0,TCCR_WGM1);
    200c:	a3 e5       	ldi	r26, 0x53	; 83
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e3 e5       	ldi	r30, 0x53	; 83
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	80 64       	ori	r24, 0x40	; 64
    2018:	8c 93       	st	X, r24
    201a:	21 c0       	rjmp	.+66     	; 0x205e <Timer_Init+0xea>
		break;
	case CTC_Mode:
		SET_BIT(Timer_TCCR0,TCCR_WGM1);
    201c:	a3 e5       	ldi	r26, 0x53	; 83
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e3 e5       	ldi	r30, 0x53	; 83
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	80 64       	ori	r24, 0x40	; 64
    2028:	8c 93       	st	X, r24
		CLR_BIT(Timer_TCCR0,TCCR_WGM1);
    202a:	a3 e5       	ldi	r26, 0x53	; 83
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e3 e5       	ldi	r30, 0x53	; 83
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8f 7b       	andi	r24, 0xBF	; 191
    2036:	8c 93       	st	X, r24
    2038:	12 c0       	rjmp	.+36     	; 0x205e <Timer_Init+0xea>
		break;
	case fast_PWM_Mode:
		SET_BIT(Timer_TCCR0,TCCR_WGM1);
    203a:	a3 e5       	ldi	r26, 0x53	; 83
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e5       	ldi	r30, 0x53	; 83
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	80 64       	ori	r24, 0x40	; 64
    2046:	8c 93       	st	X, r24
		SET_BIT(Timer_TCCR0,TCCR_WGM1);
    2048:	a3 e5       	ldi	r26, 0x53	; 83
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e3 e5       	ldi	r30, 0x53	; 83
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	80 64       	ori	r24, 0x40	; 64
    2054:	8c 93       	st	X, r24
    2056:	03 c0       	rjmp	.+6      	; 0x205e <Timer_Init+0xea>
		break;
	default: return NOT_OK;
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	9b 83       	std	Y+3, r25	; 0x03
    205c:	16 c0       	rjmp	.+44     	; 0x208a <Timer_Init+0x116>
	}
	if(clk<6&&clk>=0)
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	86 30       	cpi	r24, 0x06	; 6
    2062:	88 f4       	brcc	.+34     	; 0x2086 <Timer_Init+0x112>
	{
		Timer_TCCR0&=0b11111000;
    2064:	a3 e5       	ldi	r26, 0x53	; 83
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e3 e5       	ldi	r30, 0x53	; 83
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	88 7f       	andi	r24, 0xF8	; 248
    2070:	8c 93       	st	X, r24
		Timer_TCCR0|=clk;
    2072:	a3 e5       	ldi	r26, 0x53	; 83
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e3 e5       	ldi	r30, 0x53	; 83
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	90 81       	ld	r25, Z
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	89 2b       	or	r24, r25
    2080:	8c 93       	st	X, r24
		return OK;
    2082:	1b 82       	std	Y+3, r1	; 0x03
    2084:	02 c0       	rjmp	.+4      	; 0x208a <Timer_Init+0x116>
	}
	else
		return NOT_OK;
    2086:	21 e0       	ldi	r18, 0x01	; 1
    2088:	2b 83       	std	Y+3, r18	; 0x03
    208a:	8b 81       	ldd	r24, Y+3	; 0x03

}
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <Timer_CompareMatchEvent>:

u8 Timer_CompareMatchEvent(u8 mode)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <Timer_CompareMatchEvent+0x6>
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01
	if(mode <fast_PWM_Mode)
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	83 30       	cpi	r24, 0x03	; 3
    20ac:	a8 f4       	brcc	.+42     	; 0x20d8 <Timer_CompareMatchEvent+0x3c>
	{
		Timer_TCCR0&=0b11001111;
    20ae:	a3 e5       	ldi	r26, 0x53	; 83
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e3 e5       	ldi	r30, 0x53	; 83
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8f 7c       	andi	r24, 0xCF	; 207
    20ba:	8c 93       	st	X, r24
		mode=(mode<<4);
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	82 95       	swap	r24
    20c0:	80 7f       	andi	r24, 0xF0	; 240
    20c2:	89 83       	std	Y+1, r24	; 0x01
		Timer_TCCR0|=mode;
    20c4:	a3 e5       	ldi	r26, 0x53	; 83
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e3 e5       	ldi	r30, 0x53	; 83
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	90 81       	ld	r25, Z
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	89 2b       	or	r24, r25
    20d2:	8c 93       	st	X, r24
		return OK;
    20d4:	1a 82       	std	Y+2, r1	; 0x02
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <Timer_CompareMatchEvent+0x40>
	}
	else
		return NOT_OK;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	8a 83       	std	Y+2, r24	; 0x02
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <Timer_CompareValue>:

void Timer_CompareValue(u8 value)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	0f 92       	push	r0
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	89 83       	std	Y+1, r24	; 0x01
	Timer_OCR0=value;
    20f4:	ec e5       	ldi	r30, 0x5C	; 92
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	80 83       	st	Z, r24
}
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <Timer_preload>:
void Timer_preload(u8 preload)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	0f 92       	push	r0
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	89 83       	std	Y+1, r24	; 0x01
	Timer_TCNT0=preload;
    2110:	e2 e5       	ldi	r30, 0x52	; 82
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	80 83       	st	Z, r24
}
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <Timer_SetCallBack>:



void Timer_SetCallBack(void (*ptrfunc)(void))
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <Timer_SetCallBack+0x6>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Timer_TIMSK,TIMSK_OCIE0);
    212e:	a9 e5       	ldi	r26, 0x59	; 89
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e9 e5       	ldi	r30, 0x59	; 89
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	82 60       	ori	r24, 0x02	; 2
    213a:	8c 93       	st	X, r24
	Timer_func=ptrfunc;
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
    2140:	90 93 69 00 	sts	0x0069, r25
    2144:	80 93 68 00 	sts	0x0068, r24
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <__vector_10>:

void __vector_10 (void)  			__attribute__((signal));
void __vector_10 (void)
{
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	Timer_func();
    217c:	e0 91 68 00 	lds	r30, 0x0068
    2180:	f0 91 69 00 	lds	r31, 0x0069
    2184:	09 95       	icall
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	ff 91       	pop	r31
    218c:	ef 91       	pop	r30
    218e:	bf 91       	pop	r27
    2190:	af 91       	pop	r26
    2192:	9f 91       	pop	r25
    2194:	8f 91       	pop	r24
    2196:	7f 91       	pop	r23
    2198:	6f 91       	pop	r22
    219a:	5f 91       	pop	r21
    219c:	4f 91       	pop	r20
    219e:	3f 91       	pop	r19
    21a0:	2f 91       	pop	r18
    21a2:	0f 90       	pop	r0
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	0f 90       	pop	r0
    21a8:	1f 90       	pop	r1
    21aa:	18 95       	reti

000021ac <timer0_delay>:

void timer0_delay(u16 Overflows)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <timer0_delay+0x6>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	9a 83       	std	Y+2, r25	; 0x02
    21ba:	89 83       	std	Y+1, r24	; 0x01

	//Make timer start from zero
	Timer_TCNT0=0;
    21bc:	e2 e5       	ldi	r30, 0x52	; 82
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	10 82       	st	Z, r1
    21c2:	10 c0       	rjmp	.+32     	; 0x21e4 <timer0_delay+0x38>
	while(0!=Overflows--)
	{
		//wait until flag is raised
		while((Timer_TIFR&(1<<TIFR_OCF0))==0);
    21c4:	e8 e5       	ldi	r30, 0x58	; 88
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	82 70       	andi	r24, 0x02	; 2
    21d0:	90 70       	andi	r25, 0x00	; 0
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	b9 f3       	breq	.-18     	; 0x21c4 <timer0_delay+0x18>
		//clear overflow flag
		SET_BIT(Timer_TIFR,TIFR_OCF0);
    21d6:	a8 e5       	ldi	r26, 0x58	; 88
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e8 e5       	ldi	r30, 0x58	; 88
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	82 60       	ori	r24, 0x02	; 2
    21e2:	8c 93       	st	X, r24
void timer0_delay(u16 Overflows)
{

	//Make timer start from zero
	Timer_TCNT0=0;
	while(0!=Overflows--)
    21e4:	1b 82       	std	Y+3, r1	; 0x03
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	11 f0       	breq	.+4      	; 0x21f2 <timer0_delay+0x46>
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	8b 83       	std	Y+3, r24	; 0x03
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	88 23       	and	r24, r24
    2200:	09 f7       	brne	.-62     	; 0x21c4 <timer0_delay+0x18>
		//clear overflow flag
		SET_BIT(Timer_TIFR,TIFR_OCF0);
	}
	//timer stop
	//Timer_TCCR0=0;
}
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <GIEnable>:




void GIEnable(void)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE_Pin);
    2216:	af e5       	ldi	r26, 0x5F	; 95
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	ef e5       	ldi	r30, 0x5F	; 95
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	80 68       	ori	r24, 0x80	; 128
    2222:	8c 93       	st	X, r24
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <GIDisable>:

void GIDisable(void)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GIE_Pin);
    2232:	af e5       	ldi	r26, 0x5F	; 95
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	ef e5       	ldi	r30, 0x5F	; 95
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	8f 77       	andi	r24, 0x7F	; 127
    223e:	8c 93       	st	X, r24
}
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <INT_SetCallBack>:
#include "INT_Private.h"

void (*ptrcallback)(void);

void INT_SetCallBack(void (*callback)(void))
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	00 d0       	rcall	.+0      	; 0x224c <INT_SetCallBack+0x6>
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
	//making global pointer points to function address
	ptrcallback=callback;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	90 93 6c 00 	sts	0x006C, r25
    225c:	80 93 6b 00 	sts	0x006B, r24
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <INT_ControlSense>:

u8 INT_ControlSense(u8 intNum,u8 sense)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <INT_ControlSense+0x6>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <INT_ControlSense+0x8>
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	6a 83       	std	Y+2, r22	; 0x02
	//verifying input data
	if(sense>0&&sense<5)
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	88 23       	and	r24, r24
    2280:	09 f4       	brne	.+2      	; 0x2284 <INT_ControlSense+0x1a>
    2282:	58 c0       	rjmp	.+176    	; 0x2334 <INT_ControlSense+0xca>
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	85 30       	cpi	r24, 0x05	; 5
    2288:	08 f0       	brcs	.+2      	; 0x228c <INT_ControlSense+0x22>
    228a:	54 c0       	rjmp	.+168    	; 0x2334 <INT_ControlSense+0xca>
	  {
		switch(intNum)
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3d 83       	std	Y+5, r19	; 0x05
    2294:	2c 83       	std	Y+4, r18	; 0x04
    2296:	8c 81       	ldd	r24, Y+4	; 0x04
    2298:	9d 81       	ldd	r25, Y+5	; 0x05
    229a:	86 30       	cpi	r24, 0x06	; 6
    229c:	91 05       	cpc	r25, r1
    229e:	59 f0       	breq	.+22     	; 0x22b6 <INT_ControlSense+0x4c>
    22a0:	2c 81       	ldd	r18, Y+4	; 0x04
    22a2:	3d 81       	ldd	r19, Y+5	; 0x05
    22a4:	27 30       	cpi	r18, 0x07	; 7
    22a6:	31 05       	cpc	r19, r1
    22a8:	b1 f0       	breq	.+44     	; 0x22d6 <INT_ControlSense+0x6c>
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	9d 81       	ldd	r25, Y+5	; 0x05
    22ae:	85 30       	cpi	r24, 0x05	; 5
    22b0:	91 05       	cpc	r25, r1
    22b2:	29 f1       	breq	.+74     	; 0x22fe <INT_ControlSense+0x94>
    22b4:	3a c0       	rjmp	.+116    	; 0x232a <INT_ControlSense+0xc0>
		{
		//Configuring desired interrupt with desired sense signal
		case INT0:
			//bit masking to ensure input data will not be affected
			MCUCR &=INT0_Sense_mask;
    22b6:	a5 e5       	ldi	r26, 0x55	; 85
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e5 e5       	ldi	r30, 0x55	; 85
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	8c 7f       	andi	r24, 0xFC	; 252
    22c2:	8c 93       	st	X, r24
			//assigning SC01&ISC00 with desired sense
			MCUCR |= sense;break;
    22c4:	a5 e5       	ldi	r26, 0x55	; 85
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e5 e5       	ldi	r30, 0x55	; 85
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	90 81       	ld	r25, Z
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	89 2b       	or	r24, r25
    22d2:	8c 93       	st	X, r24
    22d4:	2d c0       	rjmp	.+90     	; 0x2330 <INT_ControlSense+0xc6>
		case INT1:
			sense  = sense<<2;
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	88 0f       	add	r24, r24
    22da:	88 0f       	add	r24, r24
    22dc:	8a 83       	std	Y+2, r24	; 0x02
			MCUCR &= INT1_Sense_mask;
    22de:	a5 e5       	ldi	r26, 0x55	; 85
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e5 e5       	ldi	r30, 0x55	; 85
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	83 7f       	andi	r24, 0xF3	; 243
    22ea:	8c 93       	st	X, r24
			//assigning SC03&ISC02 with desired sense
			MCUCR |= sense;break;
    22ec:	a5 e5       	ldi	r26, 0x55	; 85
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e5 e5       	ldi	r30, 0x55	; 85
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	90 81       	ld	r25, Z
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	89 2b       	or	r24, r25
    22fa:	8c 93       	st	X, r24
    22fc:	19 c0       	rjmp	.+50     	; 0x2330 <INT_ControlSense+0xc6>
		case INT2:
			sense  = sense<<ISC2;
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	82 95       	swap	r24
    2302:	88 0f       	add	r24, r24
    2304:	88 0f       	add	r24, r24
    2306:	80 7c       	andi	r24, 0xC0	; 192
    2308:	8a 83       	std	Y+2, r24	; 0x02
			MCUCR &= INT2_Sense_mask;
    230a:	a5 e5       	ldi	r26, 0x55	; 85
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e5 e5       	ldi	r30, 0x55	; 85
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	8f 7b       	andi	r24, 0xBF	; 191
    2316:	8c 93       	st	X, r24
			//assigning ISC2 with desired sense
			MCUCSR |= sense;break;
    2318:	a4 e5       	ldi	r26, 0x54	; 84
    231a:	b0 e0       	ldi	r27, 0x00	; 0
    231c:	e4 e5       	ldi	r30, 0x54	; 84
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	90 81       	ld	r25, Z
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	89 2b       	or	r24, r25
    2326:	8c 93       	st	X, r24
    2328:	03 c0       	rjmp	.+6      	; 0x2330 <INT_ControlSense+0xc6>
		default: return N_Ok;
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	9b 83       	std	Y+3, r25	; 0x03
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <INT_ControlSense+0xce>
		}
		return Ok;
    2330:	1b 82       	std	Y+3, r1	; 0x03
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <INT_ControlSense+0xce>
	}
	else
		return N_Ok;
    2334:	21 e0       	ldi	r18, 0x01	; 1
    2336:	2b 83       	std	Y+3, r18	; 0x03
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
}
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <INT_Enable>:

u8 INT_Enable(u8 intNum)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <INT_Enable+0x6>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	89 83       	std	Y+1, r24	; 0x01
	//verifying input data
	if(intNum>=INT2&&intNum<=INT1)
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	85 30       	cpi	r24, 0x05	; 5
    235a:	c0 f0       	brcs	.+48     	; 0x238c <INT_Enable+0x42>
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	88 30       	cpi	r24, 0x08	; 8
    2360:	a8 f4       	brcc	.+42     	; 0x238c <INT_Enable+0x42>
	{
		//enabling desired input
		SET_BIT(GICR,intNum);
    2362:	ab e5       	ldi	r26, 0x5B	; 91
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	eb e5       	ldi	r30, 0x5B	; 91
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	48 2f       	mov	r20, r24
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	02 2e       	mov	r0, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <INT_Enable+0x36>
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	0a 94       	dec	r0
    2382:	e2 f7       	brpl	.-8      	; 0x237c <INT_Enable+0x32>
    2384:	84 2b       	or	r24, r20
    2386:	8c 93       	st	X, r24
		return Ok;
    2388:	1a 82       	std	Y+2, r1	; 0x02
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <INT_Enable+0x46>
	}
	else
		return N_Ok;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	8a 83       	std	Y+2, r24	; 0x02
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <INT_Disable>:
u8 INT_Disable(u8 intNum)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <INT_Disable+0x6>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
	//verifying input data
	if(intNum>=INT2&&intNum<=INT1)
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	85 30       	cpi	r24, 0x05	; 5
    23ac:	c8 f0       	brcs	.+50     	; 0x23e0 <INT_Disable+0x44>
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	88 30       	cpi	r24, 0x08	; 8
    23b2:	b0 f4       	brcc	.+44     	; 0x23e0 <INT_Disable+0x44>
	{
		//disabling desired input
		CLR_BIT(GICR,intNum);
    23b4:	ab e5       	ldi	r26, 0x5B	; 91
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e5       	ldi	r30, 0x5B	; 91
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <INT_Disable+0x36>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <INT_Disable+0x32>
    23d6:	80 95       	com	r24
    23d8:	84 23       	and	r24, r20
    23da:	8c 93       	st	X, r24
		return Ok;
    23dc:	1a 82       	std	Y+2, r1	; 0x02
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <INT_Disable+0x48>
	}
	else
		return N_Ok;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	8a 83       	std	Y+2, r24	; 0x02
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <__vector_1>:



void __vector_1(void)    __attribute__((signal));
void __vector_1(void)
{
    23f0:	1f 92       	push	r1
    23f2:	0f 92       	push	r0
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	0f 92       	push	r0
    23f8:	11 24       	eor	r1, r1
    23fa:	2f 93       	push	r18
    23fc:	3f 93       	push	r19
    23fe:	4f 93       	push	r20
    2400:	5f 93       	push	r21
    2402:	6f 93       	push	r22
    2404:	7f 93       	push	r23
    2406:	8f 93       	push	r24
    2408:	9f 93       	push	r25
    240a:	af 93       	push	r26
    240c:	bf 93       	push	r27
    240e:	ef 93       	push	r30
    2410:	ff 93       	push	r31
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
	//handling desired actions
	ptrcallback();
    241a:	e0 91 6b 00 	lds	r30, 0x006B
    241e:	f0 91 6c 00 	lds	r31, 0x006C
    2422:	09 95       	icall
}
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	ff 91       	pop	r31
    242a:	ef 91       	pop	r30
    242c:	bf 91       	pop	r27
    242e:	af 91       	pop	r26
    2430:	9f 91       	pop	r25
    2432:	8f 91       	pop	r24
    2434:	7f 91       	pop	r23
    2436:	6f 91       	pop	r22
    2438:	5f 91       	pop	r21
    243a:	4f 91       	pop	r20
    243c:	3f 91       	pop	r19
    243e:	2f 91       	pop	r18
    2440:	0f 90       	pop	r0
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	0f 90       	pop	r0
    2446:	1f 90       	pop	r1
    2448:	18 95       	reti

0000244a <setportvalue>:


/*--------------------------------setportvalue--------------------------------*/

DIO_Error_t setportvalue(u8 Port ,u8 portvalue)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <setportvalue+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <setportvalue+0x8>
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	6a 83       	std	Y+2, r22	; 0x02
	//check input port in valid range or no
	if(Port>portD)
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	84 30       	cpi	r24, 0x04	; 4
    2460:	18 f0       	brcs	.+6      	; 0x2468 <setportvalue+0x1e>
	{
		return invalid_port;
    2462:	21 e0       	ldi	r18, 0x01	; 1
    2464:	2d 83       	std	Y+5, r18	; 0x05
    2466:	33 c0       	rjmp	.+102    	; 0x24ce <setportvalue+0x84>
	}
	else
	{
		//finding desired port to be configured
		switch(Port)
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	3c 83       	std	Y+4, r19	; 0x04
    2470:	2b 83       	std	Y+3, r18	; 0x03
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	91 05       	cpc	r25, r1
    247a:	d1 f0       	breq	.+52     	; 0x24b0 <setportvalue+0x66>
    247c:	2b 81       	ldd	r18, Y+3	; 0x03
    247e:	3c 81       	ldd	r19, Y+4	; 0x04
    2480:	22 30       	cpi	r18, 0x02	; 2
    2482:	31 05       	cpc	r19, r1
    2484:	2c f4       	brge	.+10     	; 0x2490 <setportvalue+0x46>
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	61 f0       	breq	.+24     	; 0x24a6 <setportvalue+0x5c>
    248e:	1e c0       	rjmp	.+60     	; 0x24cc <setportvalue+0x82>
    2490:	2b 81       	ldd	r18, Y+3	; 0x03
    2492:	3c 81       	ldd	r19, Y+4	; 0x04
    2494:	22 30       	cpi	r18, 0x02	; 2
    2496:	31 05       	cpc	r19, r1
    2498:	81 f0       	breq	.+32     	; 0x24ba <setportvalue+0x70>
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	83 30       	cpi	r24, 0x03	; 3
    24a0:	91 05       	cpc	r25, r1
    24a2:	81 f0       	breq	.+32     	; 0x24c4 <setportvalue+0x7a>
    24a4:	13 c0       	rjmp	.+38     	; 0x24cc <setportvalue+0x82>
		{
		//assigning input port with input portvalue
		case portA:PORTA=portvalue;break;
    24a6:	eb e3       	ldi	r30, 0x3B	; 59
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	80 83       	st	Z, r24
    24ae:	0e c0       	rjmp	.+28     	; 0x24cc <setportvalue+0x82>
		case portB:PORTB=portvalue;break;
    24b0:	e8 e3       	ldi	r30, 0x38	; 56
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	80 83       	st	Z, r24
    24b8:	09 c0       	rjmp	.+18     	; 0x24cc <setportvalue+0x82>
		case portC:PORTC=portvalue;break;
    24ba:	e5 e3       	ldi	r30, 0x35	; 53
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	80 83       	st	Z, r24
    24c2:	04 c0       	rjmp	.+8      	; 0x24cc <setportvalue+0x82>
		case portD:PORTD=portvalue;break;
    24c4:	e2 e3       	ldi	r30, 0x32	; 50
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	80 83       	st	Z, r24
		}
	}
	return Ok;
    24cc:	1d 82       	std	Y+5, r1	; 0x05
    24ce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <SetPinValue>:
/*--------------------------------setpinvalue--------------------------------*/
DIO_Error_t SetPinValue(u8 port,u8 pinorder,u8 pinvalue)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	2e 97       	sbiw	r28, 0x0e	; 14
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	6a 83       	std	Y+2, r22	; 0x02
    24f8:	4b 83       	std	Y+3, r20	; 0x03
	//check input port in valid range or no
	if(port>portD)
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	84 30       	cpi	r24, 0x04	; 4
    24fe:	18 f0       	brcs	.+6      	; 0x2506 <SetPinValue+0x26>
	{
		return invalid_port;
    2500:	21 e0       	ldi	r18, 0x01	; 1
    2502:	2e 87       	std	Y+14, r18	; 0x0e
    2504:	0e c1       	rjmp	.+540    	; 0x2722 <SetPinValue+0x242>
	}
	//check input pinorder in valid range or no
	else if(pinorder>Pin7)
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	88 30       	cpi	r24, 0x08	; 8
    250a:	18 f0       	brcs	.+6      	; 0x2512 <SetPinValue+0x32>
	{
		return invalid_pin;
    250c:	32 e0       	ldi	r19, 0x02	; 2
    250e:	3e 87       	std	Y+14, r19	; 0x0e
    2510:	08 c1       	rjmp	.+528    	; 0x2722 <SetPinValue+0x242>
	}
	//check input pinvalue in valid range or no
	else if(pinvalue>High)
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	18 f0       	brcs	.+6      	; 0x251e <SetPinValue+0x3e>
	{
		return invalid_value;
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	8e 87       	std	Y+14, r24	; 0x0e
    251c:	02 c1       	rjmp	.+516    	; 0x2722 <SetPinValue+0x242>
	}
	else
	{
		//finding desired port to be configured
		switch(port)
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	3d 87       	std	Y+13, r19	; 0x0d
    2526:	2c 87       	std	Y+12, r18	; 0x0c
    2528:	8c 85       	ldd	r24, Y+12	; 0x0c
    252a:	9d 85       	ldd	r25, Y+13	; 0x0d
    252c:	81 30       	cpi	r24, 0x01	; 1
    252e:	91 05       	cpc	r25, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <SetPinValue+0x54>
    2532:	4f c0       	rjmp	.+158    	; 0x25d2 <SetPinValue+0xf2>
    2534:	2c 85       	ldd	r18, Y+12	; 0x0c
    2536:	3d 85       	ldd	r19, Y+13	; 0x0d
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	2c f4       	brge	.+10     	; 0x2548 <SetPinValue+0x68>
    253e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2540:	9d 85       	ldd	r25, Y+13	; 0x0d
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	71 f0       	breq	.+28     	; 0x2562 <SetPinValue+0x82>
    2546:	ec c0       	rjmp	.+472    	; 0x2720 <SetPinValue+0x240>
    2548:	2c 85       	ldd	r18, Y+12	; 0x0c
    254a:	3d 85       	ldd	r19, Y+13	; 0x0d
    254c:	22 30       	cpi	r18, 0x02	; 2
    254e:	31 05       	cpc	r19, r1
    2550:	09 f4       	brne	.+2      	; 0x2554 <SetPinValue+0x74>
    2552:	77 c0       	rjmp	.+238    	; 0x2642 <SetPinValue+0x162>
    2554:	8c 85       	ldd	r24, Y+12	; 0x0c
    2556:	9d 85       	ldd	r25, Y+13	; 0x0d
    2558:	83 30       	cpi	r24, 0x03	; 3
    255a:	91 05       	cpc	r25, r1
    255c:	09 f4       	brne	.+2      	; 0x2560 <SetPinValue+0x80>
    255e:	a9 c0       	rjmp	.+338    	; 0x26b2 <SetPinValue+0x1d2>
    2560:	df c0       	rjmp	.+446    	; 0x2720 <SetPinValue+0x240>
		{
		case portA:
			//finding desired pin to be configured
			switch(pinvalue)
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	3b 87       	std	Y+11, r19	; 0x0b
    256a:	2a 87       	std	Y+10, r18	; 0x0a
    256c:	8a 85       	ldd	r24, Y+10	; 0x0a
    256e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	31 f0       	breq	.+12     	; 0x2580 <SetPinValue+0xa0>
    2574:	2a 85       	ldd	r18, Y+10	; 0x0a
    2576:	3b 85       	ldd	r19, Y+11	; 0x0b
    2578:	21 30       	cpi	r18, 0x01	; 1
    257a:	31 05       	cpc	r19, r1
    257c:	b1 f0       	breq	.+44     	; 0x25aa <SetPinValue+0xca>
    257e:	d0 c0       	rjmp	.+416    	; 0x2720 <SetPinValue+0x240>
			{
			case 0:
				//assigning desired pin with input value
				PORTA &=  ~(1<<pinorder);break;
    2580:	ab e3       	ldi	r26, 0x3B	; 59
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	eb e3       	ldi	r30, 0x3B	; 59
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	48 2f       	mov	r20, r24
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	02 2e       	mov	r0, r18
    2598:	02 c0       	rjmp	.+4      	; 0x259e <SetPinValue+0xbe>
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	0a 94       	dec	r0
    25a0:	e2 f7       	brpl	.-8      	; 0x259a <SetPinValue+0xba>
    25a2:	80 95       	com	r24
    25a4:	84 23       	and	r24, r20
    25a6:	8c 93       	st	X, r24
    25a8:	bb c0       	rjmp	.+374    	; 0x2720 <SetPinValue+0x240>
			case 1:
				PORTA|=(1<<pinorder);break;
    25aa:	ab e3       	ldi	r26, 0x3B	; 59
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	eb e3       	ldi	r30, 0x3B	; 59
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	02 2e       	mov	r0, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <SetPinValue+0xe8>
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <SetPinValue+0xe4>
    25cc:	84 2b       	or	r24, r20
    25ce:	8c 93       	st	X, r24
    25d0:	a7 c0       	rjmp	.+334    	; 0x2720 <SetPinValue+0x240>
			}
			break;

			case portB:
				switch(pinvalue)
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	39 87       	std	Y+9, r19	; 0x09
    25da:	28 87       	std	Y+8, r18	; 0x08
    25dc:	88 85       	ldd	r24, Y+8	; 0x08
    25de:	99 85       	ldd	r25, Y+9	; 0x09
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	31 f0       	breq	.+12     	; 0x25f0 <SetPinValue+0x110>
    25e4:	28 85       	ldd	r18, Y+8	; 0x08
    25e6:	39 85       	ldd	r19, Y+9	; 0x09
    25e8:	21 30       	cpi	r18, 0x01	; 1
    25ea:	31 05       	cpc	r19, r1
    25ec:	b1 f0       	breq	.+44     	; 0x261a <SetPinValue+0x13a>
    25ee:	98 c0       	rjmp	.+304    	; 0x2720 <SetPinValue+0x240>
				{
				case 0:
					PORTB &=  ~(1<<pinorder);break;
    25f0:	a8 e3       	ldi	r26, 0x38	; 56
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e8 e3       	ldi	r30, 0x38	; 56
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	48 2f       	mov	r20, r24
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	02 2e       	mov	r0, r18
    2608:	02 c0       	rjmp	.+4      	; 0x260e <SetPinValue+0x12e>
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	0a 94       	dec	r0
    2610:	e2 f7       	brpl	.-8      	; 0x260a <SetPinValue+0x12a>
    2612:	80 95       	com	r24
    2614:	84 23       	and	r24, r20
    2616:	8c 93       	st	X, r24
    2618:	83 c0       	rjmp	.+262    	; 0x2720 <SetPinValue+0x240>
				case 1:
					PORTB|=(1<<pinorder);break;
    261a:	a8 e3       	ldi	r26, 0x38	; 56
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e8 e3       	ldi	r30, 0x38	; 56
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	48 2f       	mov	r20, r24
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	02 2e       	mov	r0, r18
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <SetPinValue+0x158>
    2634:	88 0f       	add	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	0a 94       	dec	r0
    263a:	e2 f7       	brpl	.-8      	; 0x2634 <SetPinValue+0x154>
    263c:	84 2b       	or	r24, r20
    263e:	8c 93       	st	X, r24
    2640:	6f c0       	rjmp	.+222    	; 0x2720 <SetPinValue+0x240>
				}
				break;

				case portC:
					switch(pinvalue)
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	28 2f       	mov	r18, r24
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	3f 83       	std	Y+7, r19	; 0x07
    264a:	2e 83       	std	Y+6, r18	; 0x06
    264c:	8e 81       	ldd	r24, Y+6	; 0x06
    264e:	9f 81       	ldd	r25, Y+7	; 0x07
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	31 f0       	breq	.+12     	; 0x2660 <SetPinValue+0x180>
    2654:	2e 81       	ldd	r18, Y+6	; 0x06
    2656:	3f 81       	ldd	r19, Y+7	; 0x07
    2658:	21 30       	cpi	r18, 0x01	; 1
    265a:	31 05       	cpc	r19, r1
    265c:	b1 f0       	breq	.+44     	; 0x268a <SetPinValue+0x1aa>
    265e:	60 c0       	rjmp	.+192    	; 0x2720 <SetPinValue+0x240>
					{
					case 0:
						PORTC &=  ~(1<<pinorder);break;
    2660:	a5 e3       	ldi	r26, 0x35	; 53
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e5 e3       	ldi	r30, 0x35	; 53
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	48 2f       	mov	r20, r24
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	02 2e       	mov	r0, r18
    2678:	02 c0       	rjmp	.+4      	; 0x267e <SetPinValue+0x19e>
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	0a 94       	dec	r0
    2680:	e2 f7       	brpl	.-8      	; 0x267a <SetPinValue+0x19a>
    2682:	80 95       	com	r24
    2684:	84 23       	and	r24, r20
    2686:	8c 93       	st	X, r24
    2688:	4b c0       	rjmp	.+150    	; 0x2720 <SetPinValue+0x240>
					case 1:
						PORTC|=(1<<pinorder);break;
    268a:	a5 e3       	ldi	r26, 0x35	; 53
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e5 e3       	ldi	r30, 0x35	; 53
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	48 2f       	mov	r20, r24
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	02 2e       	mov	r0, r18
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <SetPinValue+0x1c8>
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	0a 94       	dec	r0
    26aa:	e2 f7       	brpl	.-8      	; 0x26a4 <SetPinValue+0x1c4>
    26ac:	84 2b       	or	r24, r20
    26ae:	8c 93       	st	X, r24
    26b0:	37 c0       	rjmp	.+110    	; 0x2720 <SetPinValue+0x240>
					}
					break;

					case portD:
						switch(pinvalue)
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	3d 83       	std	Y+5, r19	; 0x05
    26ba:	2c 83       	std	Y+4, r18	; 0x04
    26bc:	8c 81       	ldd	r24, Y+4	; 0x04
    26be:	9d 81       	ldd	r25, Y+5	; 0x05
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	31 f0       	breq	.+12     	; 0x26d0 <SetPinValue+0x1f0>
    26c4:	2c 81       	ldd	r18, Y+4	; 0x04
    26c6:	3d 81       	ldd	r19, Y+5	; 0x05
    26c8:	21 30       	cpi	r18, 0x01	; 1
    26ca:	31 05       	cpc	r19, r1
    26cc:	b1 f0       	breq	.+44     	; 0x26fa <SetPinValue+0x21a>
    26ce:	28 c0       	rjmp	.+80     	; 0x2720 <SetPinValue+0x240>
						{
						case 0:
							PORTD&=  ~(1<<pinorder);break;
    26d0:	a2 e3       	ldi	r26, 0x32	; 50
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e2 e3       	ldi	r30, 0x32	; 50
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	48 2f       	mov	r20, r24
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 2e       	mov	r0, r18
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <SetPinValue+0x20e>
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	0a 94       	dec	r0
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <SetPinValue+0x20a>
    26f2:	80 95       	com	r24
    26f4:	84 23       	and	r24, r20
    26f6:	8c 93       	st	X, r24
    26f8:	13 c0       	rjmp	.+38     	; 0x2720 <SetPinValue+0x240>
						case 1:
							PORTD|=(1<<pinorder);break;
    26fa:	a2 e3       	ldi	r26, 0x32	; 50
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e2 e3       	ldi	r30, 0x32	; 50
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	48 2f       	mov	r20, r24
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	02 2e       	mov	r0, r18
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <SetPinValue+0x238>
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	0a 94       	dec	r0
    271a:	e2 f7       	brpl	.-8      	; 0x2714 <SetPinValue+0x234>
    271c:	84 2b       	or	r24, r20
    271e:	8c 93       	st	X, r24
						}
						break;
		}
	}
	return Ok;
    2720:	1e 86       	std	Y+14, r1	; 0x0e
    2722:	8e 85       	ldd	r24, Y+14	; 0x0e

}
    2724:	2e 96       	adiw	r28, 0x0e	; 14
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <setportdirection>:
/*--------------------------------setportdirection--------------------------------*/
DIO_Error_t setportdirection(u8 port, u8 portvalue)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <setportdirection+0x6>
    273c:	00 d0       	rcall	.+0      	; 0x273e <setportdirection+0x8>
    273e:	0f 92       	push	r0
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	6a 83       	std	Y+2, r22	; 0x02
	//check input port in valid range or no
	if(port>portD)
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	84 30       	cpi	r24, 0x04	; 4
    274c:	18 f0       	brcs	.+6      	; 0x2754 <setportdirection+0x1e>
	{
		return invalid_port;
    274e:	21 e0       	ldi	r18, 0x01	; 1
    2750:	2d 83       	std	Y+5, r18	; 0x05
    2752:	33 c0       	rjmp	.+102    	; 0x27ba <setportdirection+0x84>
	}
	else
	{
		//finding desired port to be configured
		switch(port)
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	3c 83       	std	Y+4, r19	; 0x04
    275c:	2b 83       	std	Y+3, r18	; 0x03
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	81 30       	cpi	r24, 0x01	; 1
    2764:	91 05       	cpc	r25, r1
    2766:	d1 f0       	breq	.+52     	; 0x279c <setportdirection+0x66>
    2768:	2b 81       	ldd	r18, Y+3	; 0x03
    276a:	3c 81       	ldd	r19, Y+4	; 0x04
    276c:	22 30       	cpi	r18, 0x02	; 2
    276e:	31 05       	cpc	r19, r1
    2770:	2c f4       	brge	.+10     	; 0x277c <setportdirection+0x46>
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	61 f0       	breq	.+24     	; 0x2792 <setportdirection+0x5c>
    277a:	1e c0       	rjmp	.+60     	; 0x27b8 <setportdirection+0x82>
    277c:	2b 81       	ldd	r18, Y+3	; 0x03
    277e:	3c 81       	ldd	r19, Y+4	; 0x04
    2780:	22 30       	cpi	r18, 0x02	; 2
    2782:	31 05       	cpc	r19, r1
    2784:	81 f0       	breq	.+32     	; 0x27a6 <setportdirection+0x70>
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	9c 81       	ldd	r25, Y+4	; 0x04
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	91 05       	cpc	r25, r1
    278e:	81 f0       	breq	.+32     	; 0x27b0 <setportdirection+0x7a>
    2790:	13 c0       	rjmp	.+38     	; 0x27b8 <setportdirection+0x82>
		{
		//assigning input port with input portvalue
		case portA:DDRA=portvalue;break;
    2792:	ea e3       	ldi	r30, 0x3A	; 58
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	80 83       	st	Z, r24
    279a:	0e c0       	rjmp	.+28     	; 0x27b8 <setportdirection+0x82>
		case portB:DDRB=portvalue;break;
    279c:	e7 e3       	ldi	r30, 0x37	; 55
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	80 83       	st	Z, r24
    27a4:	09 c0       	rjmp	.+18     	; 0x27b8 <setportdirection+0x82>
		case portC:DDRC=portvalue;break;
    27a6:	e4 e3       	ldi	r30, 0x34	; 52
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	80 83       	st	Z, r24
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <setportdirection+0x82>
		case portD:DDRD=portvalue;break;
    27b0:	e1 e3       	ldi	r30, 0x31	; 49
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	80 83       	st	Z, r24
		}
	}
	return Ok;
    27b8:	1d 82       	std	Y+5, r1	; 0x05
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <SetPinDirection>:
/*--------------------------------setpindirection--------------------------------*/
DIO_Error_t SetPinDirection(u8 port ,u8 pinorder,u8 pinvalue)
{
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	2e 97       	sbiw	r28, 0x0e	; 14
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	6a 83       	std	Y+2, r22	; 0x02
    27e4:	4b 83       	std	Y+3, r20	; 0x03
	//check input port in valid range or no
	if(port>portD)
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	84 30       	cpi	r24, 0x04	; 4
    27ea:	18 f0       	brcs	.+6      	; 0x27f2 <SetPinDirection+0x26>
	{
		return invalid_port;
    27ec:	21 e0       	ldi	r18, 0x01	; 1
    27ee:	2e 87       	std	Y+14, r18	; 0x0e
    27f0:	0e c1       	rjmp	.+540    	; 0x2a0e <SetPinDirection+0x242>
	}
	//check input pinorder in valid range or no
	else if(pinorder>Pin7)
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
    27f4:	88 30       	cpi	r24, 0x08	; 8
    27f6:	18 f0       	brcs	.+6      	; 0x27fe <SetPinDirection+0x32>
	{
		return invalid_pin;
    27f8:	32 e0       	ldi	r19, 0x02	; 2
    27fa:	3e 87       	std	Y+14, r19	; 0x0e
    27fc:	08 c1       	rjmp	.+528    	; 0x2a0e <SetPinDirection+0x242>
	}
	//check input pinvalue in valid range or no
	else if(pinvalue>High)
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	82 30       	cpi	r24, 0x02	; 2
    2802:	18 f0       	brcs	.+6      	; 0x280a <SetPinDirection+0x3e>
	{
		return invalid_value;
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	8e 87       	std	Y+14, r24	; 0x0e
    2808:	02 c1       	rjmp	.+516    	; 0x2a0e <SetPinDirection+0x242>
	}
	else
	{
		//finding desired port to be configured
		switch(port)
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	28 2f       	mov	r18, r24
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	3d 87       	std	Y+13, r19	; 0x0d
    2812:	2c 87       	std	Y+12, r18	; 0x0c
    2814:	8c 85       	ldd	r24, Y+12	; 0x0c
    2816:	9d 85       	ldd	r25, Y+13	; 0x0d
    2818:	81 30       	cpi	r24, 0x01	; 1
    281a:	91 05       	cpc	r25, r1
    281c:	09 f4       	brne	.+2      	; 0x2820 <SetPinDirection+0x54>
    281e:	4f c0       	rjmp	.+158    	; 0x28be <SetPinDirection+0xf2>
    2820:	2c 85       	ldd	r18, Y+12	; 0x0c
    2822:	3d 85       	ldd	r19, Y+13	; 0x0d
    2824:	22 30       	cpi	r18, 0x02	; 2
    2826:	31 05       	cpc	r19, r1
    2828:	2c f4       	brge	.+10     	; 0x2834 <SetPinDirection+0x68>
    282a:	8c 85       	ldd	r24, Y+12	; 0x0c
    282c:	9d 85       	ldd	r25, Y+13	; 0x0d
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	71 f0       	breq	.+28     	; 0x284e <SetPinDirection+0x82>
    2832:	ec c0       	rjmp	.+472    	; 0x2a0c <SetPinDirection+0x240>
    2834:	2c 85       	ldd	r18, Y+12	; 0x0c
    2836:	3d 85       	ldd	r19, Y+13	; 0x0d
    2838:	22 30       	cpi	r18, 0x02	; 2
    283a:	31 05       	cpc	r19, r1
    283c:	09 f4       	brne	.+2      	; 0x2840 <SetPinDirection+0x74>
    283e:	77 c0       	rjmp	.+238    	; 0x292e <SetPinDirection+0x162>
    2840:	8c 85       	ldd	r24, Y+12	; 0x0c
    2842:	9d 85       	ldd	r25, Y+13	; 0x0d
    2844:	83 30       	cpi	r24, 0x03	; 3
    2846:	91 05       	cpc	r25, r1
    2848:	09 f4       	brne	.+2      	; 0x284c <SetPinDirection+0x80>
    284a:	a9 c0       	rjmp	.+338    	; 0x299e <SetPinDirection+0x1d2>
    284c:	df c0       	rjmp	.+446    	; 0x2a0c <SetPinDirection+0x240>
		{
		case portA:
			//finding desired pin to be configured
			switch(pinvalue)
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	3b 87       	std	Y+11, r19	; 0x0b
    2856:	2a 87       	std	Y+10, r18	; 0x0a
    2858:	8a 85       	ldd	r24, Y+10	; 0x0a
    285a:	9b 85       	ldd	r25, Y+11	; 0x0b
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	31 f0       	breq	.+12     	; 0x286c <SetPinDirection+0xa0>
    2860:	2a 85       	ldd	r18, Y+10	; 0x0a
    2862:	3b 85       	ldd	r19, Y+11	; 0x0b
    2864:	21 30       	cpi	r18, 0x01	; 1
    2866:	31 05       	cpc	r19, r1
    2868:	b1 f0       	breq	.+44     	; 0x2896 <SetPinDirection+0xca>
    286a:	d0 c0       	rjmp	.+416    	; 0x2a0c <SetPinDirection+0x240>
			{
			case 0:
				//assigning desired pin with input value
				DDRA &=  ~(1<<pinorder);break;
    286c:	aa e3       	ldi	r26, 0x3A	; 58
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	ea e3       	ldi	r30, 0x3A	; 58
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	48 2f       	mov	r20, r24
    2878:	8a 81       	ldd	r24, Y+2	; 0x02
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	02 2e       	mov	r0, r18
    2884:	02 c0       	rjmp	.+4      	; 0x288a <SetPinDirection+0xbe>
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	0a 94       	dec	r0
    288c:	e2 f7       	brpl	.-8      	; 0x2886 <SetPinDirection+0xba>
    288e:	80 95       	com	r24
    2890:	84 23       	and	r24, r20
    2892:	8c 93       	st	X, r24
    2894:	bb c0       	rjmp	.+374    	; 0x2a0c <SetPinDirection+0x240>
			case 1:
				DDRA|=(1<<pinorder);break;
    2896:	aa e3       	ldi	r26, 0x3A	; 58
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	ea e3       	ldi	r30, 0x3A	; 58
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	48 2f       	mov	r20, r24
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	02 2e       	mov	r0, r18
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <SetPinDirection+0xe8>
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	0a 94       	dec	r0
    28b6:	e2 f7       	brpl	.-8      	; 0x28b0 <SetPinDirection+0xe4>
    28b8:	84 2b       	or	r24, r20
    28ba:	8c 93       	st	X, r24
    28bc:	a7 c0       	rjmp	.+334    	; 0x2a0c <SetPinDirection+0x240>
			}
			break;

			case portB:
				switch(pinvalue)
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	39 87       	std	Y+9, r19	; 0x09
    28c6:	28 87       	std	Y+8, r18	; 0x08
    28c8:	88 85       	ldd	r24, Y+8	; 0x08
    28ca:	99 85       	ldd	r25, Y+9	; 0x09
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	31 f0       	breq	.+12     	; 0x28dc <SetPinDirection+0x110>
    28d0:	28 85       	ldd	r18, Y+8	; 0x08
    28d2:	39 85       	ldd	r19, Y+9	; 0x09
    28d4:	21 30       	cpi	r18, 0x01	; 1
    28d6:	31 05       	cpc	r19, r1
    28d8:	b1 f0       	breq	.+44     	; 0x2906 <SetPinDirection+0x13a>
    28da:	98 c0       	rjmp	.+304    	; 0x2a0c <SetPinDirection+0x240>
				{
				case 0:
					DDRB &=  ~(1<<pinorder);break;
    28dc:	a7 e3       	ldi	r26, 0x37	; 55
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e7 e3       	ldi	r30, 0x37	; 55
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	48 2f       	mov	r20, r24
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	02 2e       	mov	r0, r18
    28f4:	02 c0       	rjmp	.+4      	; 0x28fa <SetPinDirection+0x12e>
    28f6:	88 0f       	add	r24, r24
    28f8:	99 1f       	adc	r25, r25
    28fa:	0a 94       	dec	r0
    28fc:	e2 f7       	brpl	.-8      	; 0x28f6 <SetPinDirection+0x12a>
    28fe:	80 95       	com	r24
    2900:	84 23       	and	r24, r20
    2902:	8c 93       	st	X, r24
    2904:	83 c0       	rjmp	.+262    	; 0x2a0c <SetPinDirection+0x240>
				case 1:
					DDRB|=(1<<pinorder);break;
    2906:	a7 e3       	ldi	r26, 0x37	; 55
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e7 e3       	ldi	r30, 0x37	; 55
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	48 2f       	mov	r20, r24
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	02 2e       	mov	r0, r18
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <SetPinDirection+0x158>
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	0a 94       	dec	r0
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <SetPinDirection+0x154>
    2928:	84 2b       	or	r24, r20
    292a:	8c 93       	st	X, r24
    292c:	6f c0       	rjmp	.+222    	; 0x2a0c <SetPinDirection+0x240>
				}
				break;

				case portC:
					switch(pinvalue)
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	3f 83       	std	Y+7, r19	; 0x07
    2936:	2e 83       	std	Y+6, r18	; 0x06
    2938:	8e 81       	ldd	r24, Y+6	; 0x06
    293a:	9f 81       	ldd	r25, Y+7	; 0x07
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	31 f0       	breq	.+12     	; 0x294c <SetPinDirection+0x180>
    2940:	2e 81       	ldd	r18, Y+6	; 0x06
    2942:	3f 81       	ldd	r19, Y+7	; 0x07
    2944:	21 30       	cpi	r18, 0x01	; 1
    2946:	31 05       	cpc	r19, r1
    2948:	b1 f0       	breq	.+44     	; 0x2976 <SetPinDirection+0x1aa>
    294a:	60 c0       	rjmp	.+192    	; 0x2a0c <SetPinDirection+0x240>
					{
					case 0:
						DDRC &=  ~(1<<pinorder);break;
    294c:	a4 e3       	ldi	r26, 0x34	; 52
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e4 e3       	ldi	r30, 0x34	; 52
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	48 2f       	mov	r20, r24
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	02 2e       	mov	r0, r18
    2964:	02 c0       	rjmp	.+4      	; 0x296a <SetPinDirection+0x19e>
    2966:	88 0f       	add	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	0a 94       	dec	r0
    296c:	e2 f7       	brpl	.-8      	; 0x2966 <SetPinDirection+0x19a>
    296e:	80 95       	com	r24
    2970:	84 23       	and	r24, r20
    2972:	8c 93       	st	X, r24
    2974:	4b c0       	rjmp	.+150    	; 0x2a0c <SetPinDirection+0x240>
					case 1:
						DDRC|=(1<<pinorder);break;
    2976:	a4 e3       	ldi	r26, 0x34	; 52
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e4 e3       	ldi	r30, 0x34	; 52
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	48 2f       	mov	r20, r24
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	02 2e       	mov	r0, r18
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <SetPinDirection+0x1c8>
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	0a 94       	dec	r0
    2996:	e2 f7       	brpl	.-8      	; 0x2990 <SetPinDirection+0x1c4>
    2998:	84 2b       	or	r24, r20
    299a:	8c 93       	st	X, r24
    299c:	37 c0       	rjmp	.+110    	; 0x2a0c <SetPinDirection+0x240>
					}
					break;

					case portD:
						switch(pinvalue)
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	3d 83       	std	Y+5, r19	; 0x05
    29a6:	2c 83       	std	Y+4, r18	; 0x04
    29a8:	8c 81       	ldd	r24, Y+4	; 0x04
    29aa:	9d 81       	ldd	r25, Y+5	; 0x05
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	31 f0       	breq	.+12     	; 0x29bc <SetPinDirection+0x1f0>
    29b0:	2c 81       	ldd	r18, Y+4	; 0x04
    29b2:	3d 81       	ldd	r19, Y+5	; 0x05
    29b4:	21 30       	cpi	r18, 0x01	; 1
    29b6:	31 05       	cpc	r19, r1
    29b8:	b1 f0       	breq	.+44     	; 0x29e6 <SetPinDirection+0x21a>
    29ba:	28 c0       	rjmp	.+80     	; 0x2a0c <SetPinDirection+0x240>
						{
						case 0:
							DDRD &=  ~(1<<pinorder);break;
    29bc:	a1 e3       	ldi	r26, 0x31	; 49
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e1 e3       	ldi	r30, 0x31	; 49
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	48 2f       	mov	r20, r24
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	02 2e       	mov	r0, r18
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <SetPinDirection+0x20e>
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	0a 94       	dec	r0
    29dc:	e2 f7       	brpl	.-8      	; 0x29d6 <SetPinDirection+0x20a>
    29de:	80 95       	com	r24
    29e0:	84 23       	and	r24, r20
    29e2:	8c 93       	st	X, r24
    29e4:	13 c0       	rjmp	.+38     	; 0x2a0c <SetPinDirection+0x240>
						case 1:
							DDRD|=(1<<pinorder);break;
    29e6:	a1 e3       	ldi	r26, 0x31	; 49
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e1 e3       	ldi	r30, 0x31	; 49
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	48 2f       	mov	r20, r24
    29f2:	8a 81       	ldd	r24, Y+2	; 0x02
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	02 2e       	mov	r0, r18
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <SetPinDirection+0x238>
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	0a 94       	dec	r0
    2a06:	e2 f7       	brpl	.-8      	; 0x2a00 <SetPinDirection+0x234>
    2a08:	84 2b       	or	r24, r20
    2a0a:	8c 93       	st	X, r24
						}
						break;
		}
	}
	return Ok;
    2a0c:	1e 86       	std	Y+14, r1	; 0x0e
    2a0e:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    2a10:	2e 96       	adiw	r28, 0x0e	; 14
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <GetPinValue>:

DIO_Error_t GetPinValue(u8 Port,u8 PinOrder,u8 *value)
{
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	27 97       	sbiw	r28, 0x07	; 7
    2a2c:	0f b6       	in	r0, 0x3f	; 63
    2a2e:	f8 94       	cli
    2a30:	de bf       	out	0x3e, r29	; 62
    2a32:	0f be       	out	0x3f, r0	; 63
    2a34:	cd bf       	out	0x3d, r28	; 61
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	6a 83       	std	Y+2, r22	; 0x02
    2a3a:	5c 83       	std	Y+4, r21	; 0x04
    2a3c:	4b 83       	std	Y+3, r20	; 0x03
	//check input port in valid range or no
	if(Port>portD)
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	84 30       	cpi	r24, 0x04	; 4
    2a42:	18 f0       	brcs	.+6      	; 0x2a4a <GetPinValue+0x28>
	{
		return invalid_port;
    2a44:	21 e0       	ldi	r18, 0x01	; 1
    2a46:	2f 83       	std	Y+7, r18	; 0x07
    2a48:	77 c0       	rjmp	.+238    	; 0x2b38 <GetPinValue+0x116>
	}
	//check input pinorder in valid range or no
	else if(PinOrder>Pin7)
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	88 30       	cpi	r24, 0x08	; 8
    2a4e:	18 f0       	brcs	.+6      	; 0x2a56 <GetPinValue+0x34>
	{
		return invalid_pin;
    2a50:	32 e0       	ldi	r19, 0x02	; 2
    2a52:	3f 83       	std	Y+7, r19	; 0x07
    2a54:	71 c0       	rjmp	.+226    	; 0x2b38 <GetPinValue+0x116>
	}
	else
	{
		//finding desired port to be configured
		switch(Port)
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	48 2f       	mov	r20, r24
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	5e 83       	std	Y+6, r21	; 0x06
    2a5e:	4d 83       	std	Y+5, r20	; 0x05
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	81 30       	cpi	r24, 0x01	; 1
    2a66:	91 05       	cpc	r25, r1
    2a68:	59 f1       	breq	.+86     	; 0x2ac0 <GetPinValue+0x9e>
    2a6a:	2d 81       	ldd	r18, Y+5	; 0x05
    2a6c:	3e 81       	ldd	r19, Y+6	; 0x06
    2a6e:	22 30       	cpi	r18, 0x02	; 2
    2a70:	31 05       	cpc	r19, r1
    2a72:	34 f4       	brge	.+12     	; 0x2a80 <GetPinValue+0x5e>
    2a74:	4d 81       	ldd	r20, Y+5	; 0x05
    2a76:	5e 81       	ldd	r21, Y+6	; 0x06
    2a78:	41 15       	cp	r20, r1
    2a7a:	51 05       	cpc	r21, r1
    2a7c:	69 f0       	breq	.+26     	; 0x2a98 <GetPinValue+0x76>
    2a7e:	5b c0       	rjmp	.+182    	; 0x2b36 <GetPinValue+0x114>
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	82 30       	cpi	r24, 0x02	; 2
    2a86:	91 05       	cpc	r25, r1
    2a88:	79 f1       	breq	.+94     	; 0x2ae8 <GetPinValue+0xc6>
    2a8a:	2d 81       	ldd	r18, Y+5	; 0x05
    2a8c:	3e 81       	ldd	r19, Y+6	; 0x06
    2a8e:	23 30       	cpi	r18, 0x03	; 3
    2a90:	31 05       	cpc	r19, r1
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <GetPinValue+0x74>
    2a94:	3d c0       	rjmp	.+122    	; 0x2b10 <GetPinValue+0xee>
    2a96:	4f c0       	rjmp	.+158    	; 0x2b36 <GetPinValue+0x114>
		{
		case portA:
			//getting value of desired pin
			*value = GET_BIT(PINA,PinOrder);break;
    2a98:	e9 e3       	ldi	r30, 0x39	; 57
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	a9 01       	movw	r20, r18
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <GetPinValue+0x8e>
    2aac:	55 95       	asr	r21
    2aae:	47 95       	ror	r20
    2ab0:	8a 95       	dec	r24
    2ab2:	e2 f7       	brpl	.-8      	; 0x2aac <GetPinValue+0x8a>
    2ab4:	ca 01       	movw	r24, r20
    2ab6:	81 70       	andi	r24, 0x01	; 1
    2ab8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aba:	fc 81       	ldd	r31, Y+4	; 0x04
    2abc:	80 83       	st	Z, r24
    2abe:	3b c0       	rjmp	.+118    	; 0x2b36 <GetPinValue+0x114>
		case portB:
			*value = GET_BIT(PINB,PinOrder);break;
    2ac0:	e6 e3       	ldi	r30, 0x36	; 54
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <GetPinValue+0xb6>
    2ad4:	55 95       	asr	r21
    2ad6:	47 95       	ror	r20
    2ad8:	8a 95       	dec	r24
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <GetPinValue+0xb2>
    2adc:	ca 01       	movw	r24, r20
    2ade:	81 70       	andi	r24, 0x01	; 1
    2ae0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ae4:	80 83       	st	Z, r24
    2ae6:	27 c0       	rjmp	.+78     	; 0x2b36 <GetPinValue+0x114>
		case portC:
			*value = GET_BIT(PINC,PinOrder);break;
    2ae8:	e3 e3       	ldi	r30, 0x33	; 51
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	88 2f       	mov	r24, r24
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	a9 01       	movw	r20, r18
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <GetPinValue+0xde>
    2afc:	55 95       	asr	r21
    2afe:	47 95       	ror	r20
    2b00:	8a 95       	dec	r24
    2b02:	e2 f7       	brpl	.-8      	; 0x2afc <GetPinValue+0xda>
    2b04:	ca 01       	movw	r24, r20
    2b06:	81 70       	andi	r24, 0x01	; 1
    2b08:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0c:	80 83       	st	Z, r24
    2b0e:	13 c0       	rjmp	.+38     	; 0x2b36 <GetPinValue+0x114>
		case portD:
			*value = GET_BIT(PIND,PinOrder);break;
    2b10:	e0 e3       	ldi	r30, 0x30	; 48
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a9 01       	movw	r20, r18
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <GetPinValue+0x106>
    2b24:	55 95       	asr	r21
    2b26:	47 95       	ror	r20
    2b28:	8a 95       	dec	r24
    2b2a:	e2 f7       	brpl	.-8      	; 0x2b24 <GetPinValue+0x102>
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	81 70       	andi	r24, 0x01	; 1
    2b30:	eb 81       	ldd	r30, Y+3	; 0x03
    2b32:	fc 81       	ldd	r31, Y+4	; 0x04
    2b34:	80 83       	st	Z, r24
		}
	}

	return Ok;
    2b36:	1f 82       	std	Y+7, r1	; 0x07
    2b38:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2b3a:	27 96       	adiw	r28, 0x07	; 7
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <togglePin>:

DIO_Error_t togglePin(u8 Port,u8 PinOrder)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <togglePin+0x6>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <togglePin+0x8>
    2b54:	0f 92       	push	r0
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	89 83       	std	Y+1, r24	; 0x01
    2b5c:	6a 83       	std	Y+2, r22	; 0x02
	//check input port in valid range or no
	if(Port>portD)
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	84 30       	cpi	r24, 0x04	; 4
    2b62:	18 f0       	brcs	.+6      	; 0x2b6a <togglePin+0x1e>
	{
		return invalid_port;
    2b64:	21 e0       	ldi	r18, 0x01	; 1
    2b66:	2d 83       	std	Y+5, r18	; 0x05
    2b68:	75 c0       	rjmp	.+234    	; 0x2c54 <togglePin+0x108>
	}
	//check input pinorder in valid range or no
	else if(PinOrder>Pin7)
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	88 30       	cpi	r24, 0x08	; 8
    2b6e:	18 f0       	brcs	.+6      	; 0x2b76 <togglePin+0x2a>
	{
		return invalid_pin;
    2b70:	32 e0       	ldi	r19, 0x02	; 2
    2b72:	3d 83       	std	Y+5, r19	; 0x05
    2b74:	6f c0       	rjmp	.+222    	; 0x2c54 <togglePin+0x108>
	}
	else
	{
		//finding desired port to be configured
		switch(Port)
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	3c 83       	std	Y+4, r19	; 0x04
    2b7e:	2b 83       	std	Y+3, r18	; 0x03
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	9c 81       	ldd	r25, Y+4	; 0x04
    2b84:	81 30       	cpi	r24, 0x01	; 1
    2b86:	91 05       	cpc	r25, r1
    2b88:	49 f1       	breq	.+82     	; 0x2bdc <togglePin+0x90>
    2b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b8e:	22 30       	cpi	r18, 0x02	; 2
    2b90:	31 05       	cpc	r19, r1
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <togglePin+0x52>
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	9c 81       	ldd	r25, Y+4	; 0x04
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	61 f0       	breq	.+24     	; 0x2bb4 <togglePin+0x68>
    2b9c:	5a c0       	rjmp	.+180    	; 0x2c52 <togglePin+0x106>
    2b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba2:	22 30       	cpi	r18, 0x02	; 2
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	71 f1       	breq	.+92     	; 0x2c04 <togglePin+0xb8>
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	83 30       	cpi	r24, 0x03	; 3
    2bae:	91 05       	cpc	r25, r1
    2bb0:	e9 f1       	breq	.+122    	; 0x2c2c <togglePin+0xe0>
    2bb2:	4f c0       	rjmp	.+158    	; 0x2c52 <togglePin+0x106>
		{
		case portA:
			//toggling input pin
			TOG_BIT(PORTA,PinOrder);break;
    2bb4:	ab e3       	ldi	r26, 0x3B	; 59
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	eb e3       	ldi	r30, 0x3B	; 59
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	48 2f       	mov	r20, r24
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	28 2f       	mov	r18, r24
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	02 2e       	mov	r0, r18
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <togglePin+0x86>
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	0a 94       	dec	r0
    2bd4:	e2 f7       	brpl	.-8      	; 0x2bce <togglePin+0x82>
    2bd6:	84 27       	eor	r24, r20
    2bd8:	8c 93       	st	X, r24
    2bda:	3b c0       	rjmp	.+118    	; 0x2c52 <togglePin+0x106>
		case portB:
			TOG_BIT(PORTB,PinOrder);break;
    2bdc:	a8 e3       	ldi	r26, 0x38	; 56
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e8 e3       	ldi	r30, 0x38	; 56
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	48 2f       	mov	r20, r24
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	02 2e       	mov	r0, r18
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <togglePin+0xae>
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	0a 94       	dec	r0
    2bfc:	e2 f7       	brpl	.-8      	; 0x2bf6 <togglePin+0xaa>
    2bfe:	84 27       	eor	r24, r20
    2c00:	8c 93       	st	X, r24
    2c02:	27 c0       	rjmp	.+78     	; 0x2c52 <togglePin+0x106>
		case portC:
			TOG_BIT(PORTC,PinOrder);break;
    2c04:	a5 e3       	ldi	r26, 0x35	; 53
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e5 e3       	ldi	r30, 0x35	; 53
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	48 2f       	mov	r20, r24
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	02 2e       	mov	r0, r18
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <togglePin+0xd6>
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	0a 94       	dec	r0
    2c24:	e2 f7       	brpl	.-8      	; 0x2c1e <togglePin+0xd2>
    2c26:	84 27       	eor	r24, r20
    2c28:	8c 93       	st	X, r24
    2c2a:	13 c0       	rjmp	.+38     	; 0x2c52 <togglePin+0x106>
		case portD:
			TOG_BIT(PORTD,PinOrder);break;
    2c2c:	a2 e3       	ldi	r26, 0x32	; 50
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e2 e3       	ldi	r30, 0x32	; 50
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	48 2f       	mov	r20, r24
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	02 2e       	mov	r0, r18
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <togglePin+0xfe>
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	0a 94       	dec	r0
    2c4c:	e2 f7       	brpl	.-8      	; 0x2c46 <togglePin+0xfa>
    2c4e:	84 27       	eor	r24, r20
    2c50:	8c 93       	st	X, r24
		}
	}
	return Ok;
    2c52:	1d 82       	std	Y+5, r1	; 0x05
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <timer0_passCallback>:
#include "../../MCAL/GIE/GIE.h"
#include "timer0_CallBack.h"


void timer0_passCallback(void (*notific)(void))
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <timer0_passCallback+0x6>
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	89 83       	std	Y+1, r24	; 0x01
	Timer_SetCallBack(notific);
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	0e 94 90 10 	call	0x2120	; 0x2120 <Timer_SetCallBack>
}
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <timer0_Start>:

void timer0_Start(u8 prescaler ,u8 compareValue)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <timer0_Start+0x6>
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	6a 83       	std	Y+2, r22	; 0x02
	if(compareValue==0)
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	88 23       	and	r24, r24
    2c98:	29 f4       	brne	.+10     	; 0x2ca4 <timer0_Start+0x1e>
	{
		Timer_Init(normal_Mode,prescaler);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	69 81       	ldd	r22, Y+1	; 0x01
    2c9e:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <Timer_Init>
    2ca2:	07 c0       	rjmp	.+14     	; 0x2cb2 <timer0_Start+0x2c>
	}
	else
	{
		Timer_Init(CTC_Mode,prescaler);
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	69 81       	ldd	r22, Y+1	; 0x01
    2ca8:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <Timer_Init>
		Timer_CompareValue(compareValue);
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Timer_CompareValue>
	}
}
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <delay>:

void delay(u16 overflows)
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <delay+0x6>
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	89 83       	std	Y+1, r24	; 0x01
	timer0_delay(overflows);
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cce:	0e 94 d6 10 	call	0x21ac	; 0x21ac <timer0_delay>
}
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <Button_init>:
#include "../../Utilities/BIT_MATH.h"
#include "../../MCAL/DIO/DIO.h"
#include "Push_Button.h"

void Button_init(u8 buttonPort,u8 buttonPin)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <Button_init+0x6>
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	6a 83       	std	Y+2, r22	; 0x02
	SetPinDirection(buttonPort,buttonPin,Input);
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	6a 81       	ldd	r22, Y+2	; 0x02
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
}
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	08 95       	ret

00002cfe <Button_read>:
void Button_read(u8 buttonPort,u8 buttonPin,u8 *value)
{
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <Button_read+0x6>
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <Button_read+0x8>
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	6a 83       	std	Y+2, r22	; 0x02
    2d0e:	5c 83       	std	Y+4, r21	; 0x04
    2d10:	4b 83       	std	Y+3, r20	; 0x03
	GetPinValue(buttonPort,buttonPin,value);
    2d12:	2b 81       	ldd	r18, Y+3	; 0x03
    2d14:	3c 81       	ldd	r19, Y+4	; 0x04
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	6a 81       	ldd	r22, Y+2	; 0x02
    2d1a:	a9 01       	movw	r20, r18
    2d1c:	0e 94 11 15 	call	0x2a22	; 0x2a22 <GetPinValue>
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <Led_init>:
#include "Led.h"
#include "../../MCAL/timer0/Timer0_Interface.h"
//#include <util/delay.h>

u8 Led_init(u8 Led_port,u8 Led_pin)
{
    2d2e:	df 93       	push	r29
    2d30:	cf 93       	push	r28
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <Led_init+0x6>
    2d34:	00 d0       	rcall	.+0      	; 0x2d36 <Led_init+0x8>
    2d36:	cd b7       	in	r28, 0x3d	; 61
    2d38:	de b7       	in	r29, 0x3e	; 62
    2d3a:	8a 83       	std	Y+2, r24	; 0x02
    2d3c:	6b 83       	std	Y+3, r22	; 0x03
	//setting Led_pin as output
	u8 error=SetPinDirection(Led_port,Led_pin,Output);
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	6b 81       	ldd	r22, Y+3	; 0x03
    2d42:	41 e0       	ldi	r20, 0x01	; 1
    2d44:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
    2d48:	89 83       	std	Y+1, r24	; 0x01
	//verifying input data
	if(error==Ok)
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	88 23       	and	r24, r24
    2d4e:	11 f4       	brne	.+4      	; 0x2d54 <Led_init+0x26>
	{
		return Ok;
    2d50:	1c 82       	std	Y+4, r1	; 0x04
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <Led_init+0x2a>
	}
	else
		return N_Ok;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	8c 83       	std	Y+4, r24	; 0x04
    2d58:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <Led_on>:

u8 Led_on(u8 Led_port,u8 Led_pin)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <Led_on+0x6>
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <Led_on+0x8>
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	8a 83       	std	Y+2, r24	; 0x02
    2d76:	6b 83       	std	Y+3, r22	; 0x03
	//setting Led_pin high
	u8 error=SetPinValue(Led_port,Led_pin,High);
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	6b 81       	ldd	r22, Y+3	; 0x03
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    2d82:	89 83       	std	Y+1, r24	; 0x01
	//verifying input data
	if(error==Ok)
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	88 23       	and	r24, r24
    2d88:	11 f4       	brne	.+4      	; 0x2d8e <Led_on+0x26>
	{
		return Ok;
    2d8a:	1c 82       	std	Y+4, r1	; 0x04
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <Led_on+0x2a>
	}
	else
		return N_Ok;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	8c 83       	std	Y+4, r24	; 0x04
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <Led_off>:

u8 Led_off(u8 Led_port,u8 Led_pin)
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <Led_off+0x6>
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <Led_off+0x8>
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	8a 83       	std	Y+2, r24	; 0x02
    2db0:	6b 83       	std	Y+3, r22	; 0x03
	//setting Led_pin Low
	u8 error=SetPinValue(Led_port,Led_pin,Low);
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	6b 81       	ldd	r22, Y+3	; 0x03
    2db6:	40 e0       	ldi	r20, 0x00	; 0
    2db8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
    2dbc:	89 83       	std	Y+1, r24	; 0x01
	//verifying input data
	if(error==Ok)
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	88 23       	and	r24, r24
    2dc2:	11 f4       	brne	.+4      	; 0x2dc8 <Led_off+0x26>
	{
		return Ok;
    2dc4:	1c 82       	std	Y+4, r1	; 0x04
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <Led_off+0x2a>
	}
	else
		return N_Ok;
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	8c 83       	std	Y+4, r24	; 0x04
    2dcc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <Led_Blink>:

u8 Led_Blink(u8 Led_port,u8 Led_pin,u16 overflows,s16 blink_time_ms,u8 *blinkStop)
{
    2ddc:	0f 93       	push	r16
    2dde:	1f 93       	push	r17
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	2a 97       	sbiw	r28, 0x0a	; 10
    2dea:	0f b6       	in	r0, 0x3f	; 63
    2dec:	f8 94       	cli
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	cd bf       	out	0x3d, r28	; 61
    2df4:	8a 83       	std	Y+2, r24	; 0x02
    2df6:	6b 83       	std	Y+3, r22	; 0x03
    2df8:	5d 83       	std	Y+5, r21	; 0x05
    2dfa:	4c 83       	std	Y+4, r20	; 0x04
    2dfc:	3f 83       	std	Y+7, r19	; 0x07
    2dfe:	2e 83       	std	Y+6, r18	; 0x06
    2e00:	19 87       	std	Y+9, r17	; 0x09
    2e02:	08 87       	std	Y+8, r16	; 0x08
	u8 error;

	error=togglePin(Led_port,Led_pin);
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	6b 81       	ldd	r22, Y+3	; 0x03
    2e08:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
    2e0c:	89 83       	std	Y+1, r24	; 0x01
	//check input data
	if(error==Ok)
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	88 23       	and	r24, r24
    2e12:	01 f5       	brne	.+64     	; 0x2e54 <Led_Blink+0x78>
    2e14:	0e c0       	rjmp	.+28     	; 0x2e32 <Led_Blink+0x56>
	{
		while(blink_time_ms>=1 && *blinkStop!=High)
		{
			//blinking led by blink_delay_ms
			togglePin(Led_port,Led_pin);
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	6b 81       	ldd	r22, Y+3	; 0x03
    2e1a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
			timer0_delay(overflows);
    2e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e20:	9d 81       	ldd	r25, Y+5	; 0x05
    2e22:	0e 94 d6 10 	call	0x21ac	; 0x21ac <timer0_delay>
			blink_time_ms-=350;
    2e26:	8e 81       	ldd	r24, Y+6	; 0x06
    2e28:	9f 81       	ldd	r25, Y+7	; 0x07
    2e2a:	8e 55       	subi	r24, 0x5E	; 94
    2e2c:	91 40       	sbci	r25, 0x01	; 1
    2e2e:	9f 83       	std	Y+7, r25	; 0x07
    2e30:	8e 83       	std	Y+6, r24	; 0x06

	error=togglePin(Led_port,Led_pin);
	//check input data
	if(error==Ok)
	{
		while(blink_time_ms>=1 && *blinkStop!=High)
    2e32:	8e 81       	ldd	r24, Y+6	; 0x06
    2e34:	9f 81       	ldd	r25, Y+7	; 0x07
    2e36:	18 16       	cp	r1, r24
    2e38:	19 06       	cpc	r1, r25
    2e3a:	2c f4       	brge	.+10     	; 0x2e46 <Led_Blink+0x6a>
    2e3c:	e8 85       	ldd	r30, Y+8	; 0x08
    2e3e:	f9 85       	ldd	r31, Y+9	; 0x09
    2e40:	80 81       	ld	r24, Z
    2e42:	81 30       	cpi	r24, 0x01	; 1
    2e44:	41 f7       	brne	.-48     	; 0x2e16 <Led_Blink+0x3a>
			//blinking led by blink_delay_ms
			togglePin(Led_port,Led_pin);
			timer0_delay(overflows);
			blink_time_ms-=350;
		}
		SetPinValue(Led_port,Led_pin,Low);
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	6b 81       	ldd	r22, Y+3	; 0x03
    2e4a:	40 e0       	ldi	r20, 0x00	; 0
    2e4c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		return Ok;
    2e50:	1a 86       	std	Y+10, r1	; 0x0a
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <Led_Blink+0x7c>
	}
	else
		return N_Ok;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	8a 87       	std	Y+10, r24	; 0x0a
    2e58:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2e5a:	2a 96       	adiw	r28, 0x0a	; 10
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	08 95       	ret

00002e70 <_2Led_Blink>:
u8 _2Led_Blink(u8 Led1_port,u8 Led1_pin,u8 Led2_port,u8 Led2_pin,u16 overflows,s16 blink_time_ms)
{
    2e70:	ef 92       	push	r14
    2e72:	ff 92       	push	r15
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	2b 97       	sbiw	r28, 0x0b	; 11
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	8b 83       	std	Y+3, r24	; 0x03
    2e8e:	6c 83       	std	Y+4, r22	; 0x04
    2e90:	4d 83       	std	Y+5, r20	; 0x05
    2e92:	2e 83       	std	Y+6, r18	; 0x06
    2e94:	18 87       	std	Y+8, r17	; 0x08
    2e96:	0f 83       	std	Y+7, r16	; 0x07
    2e98:	fa 86       	std	Y+10, r15	; 0x0a
    2e9a:	e9 86       	std	Y+9, r14	; 0x09
	u8 error1,error2;
	error1=togglePin(Led1_port,Led1_pin);
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	6c 81       	ldd	r22, Y+4	; 0x04
    2ea0:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
    2ea4:	8a 83       	std	Y+2, r24	; 0x02
	error2=togglePin(Led2_port,Led2_pin);
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	6e 81       	ldd	r22, Y+6	; 0x06
    2eaa:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
    2eae:	89 83       	std	Y+1, r24	; 0x01
	//check input data
	if(error1==Ok&&error2==Ok)
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	88 23       	and	r24, r24
    2eb4:	49 f5       	brne	.+82     	; 0x2f08 <_2Led_Blink+0x98>
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	88 23       	and	r24, r24
    2eba:	31 f5       	brne	.+76     	; 0x2f08 <_2Led_Blink+0x98>
    2ebc:	14 c0       	rjmp	.+40     	; 0x2ee6 <_2Led_Blink+0x76>
	{
		while(blink_time_ms>=1)
		{
			//blinking LEDs by blink_delay_ms
			error1=togglePin(Led1_port,Led1_pin);
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	6c 81       	ldd	r22, Y+4	; 0x04
    2ec2:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
    2ec6:	8a 83       	std	Y+2, r24	; 0x02
			error2=togglePin(Led2_port,Led2_pin);
    2ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eca:	6e 81       	ldd	r22, Y+6	; 0x06
    2ecc:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <togglePin>
    2ed0:	89 83       	std	Y+1, r24	; 0x01
//			_delay_ms(500);
			timer0_delay(overflows);
    2ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed4:	98 85       	ldd	r25, Y+8	; 0x08
    2ed6:	0e 94 d6 10 	call	0x21ac	; 0x21ac <timer0_delay>
			blink_time_ms-=350;
    2eda:	89 85       	ldd	r24, Y+9	; 0x09
    2edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ede:	8e 55       	subi	r24, 0x5E	; 94
    2ee0:	91 40       	sbci	r25, 0x01	; 1
    2ee2:	9a 87       	std	Y+10, r25	; 0x0a
    2ee4:	89 87       	std	Y+9, r24	; 0x09
	error1=togglePin(Led1_port,Led1_pin);
	error2=togglePin(Led2_port,Led2_pin);
	//check input data
	if(error1==Ok&&error2==Ok)
	{
		while(blink_time_ms>=1)
    2ee6:	89 85       	ldd	r24, Y+9	; 0x09
    2ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eea:	18 16       	cp	r1, r24
    2eec:	19 06       	cpc	r1, r25
    2eee:	3c f3       	brlt	.-50     	; 0x2ebe <_2Led_Blink+0x4e>
			error2=togglePin(Led2_port,Led2_pin);
//			_delay_ms(500);
			timer0_delay(overflows);
			blink_time_ms-=350;
		}
		SetPinValue(Led1_port,Led1_pin,Low);
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	6c 81       	ldd	r22, Y+4	; 0x04
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		SetPinValue(Led2_port,Led2_pin,Low);
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	6e 81       	ldd	r22, Y+6	; 0x06
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
		return Ok;
    2f04:	1b 86       	std	Y+11, r1	; 0x0b
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <_2Led_Blink+0x9c>
	}
	else
		return N_Ok;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	8b 87       	std	Y+11, r24	; 0x0b
    2f0c:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    2f0e:	2b 96       	adiw	r28, 0x0b	; 11
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	ff 90       	pop	r15
    2f24:	ef 90       	pop	r14
    2f26:	08 95       	ret

00002f28 <EXT_INT_Control>:
#include  "../../MCAL/EXT_Interupts/INT_interface.h"
#include  "../../MCAL/GIE/GIE.h"
#include "../EXT_Int_CallBack/EXT_Interupts_CallBack.h"

u8 EXT_INT_Control(u8 state)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <EXT_INT_Control+0x6>
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	89 83       	std	Y+1, r24	; 0x01
	//initializing INT0
	SetPinDirection(portD,Pin2,Input);
    2f34:	83 e0       	ldi	r24, 0x03	; 3
    2f36:	62 e0       	ldi	r22, 0x02	; 2
    2f38:	40 e0       	ldi	r20, 0x00	; 0
    2f3a:	0e 94 e6 13 	call	0x27cc	; 0x27cc <SetPinDirection>
	//Setting INT0 pin as pull up
	SetPinValue(portD,Pin2,High);
    2f3e:	83 e0       	ldi	r24, 0x03	; 3
    2f40:	62 e0       	ldi	r22, 0x02	; 2
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	0e 94 70 12 	call	0x24e0	; 0x24e0 <SetPinValue>
	//verifying input data
	if(state==enable)
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	29 f4       	brne	.+10     	; 0x2f58 <EXT_INT_Control+0x30>
	{
		INT_Enable(INT0);
    2f4e:	86 e0       	ldi	r24, 0x06	; 6
    2f50:	0e 94 a5 11 	call	0x234a	; 0x234a <INT_Enable>
		return Ok;
    2f54:	1a 82       	std	Y+2, r1	; 0x02
    2f56:	0a c0       	rjmp	.+20     	; 0x2f6c <EXT_INT_Control+0x44>
	}
	else if(state==disable)
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	82 30       	cpi	r24, 0x02	; 2
    2f5c:	29 f4       	brne	.+10     	; 0x2f68 <EXT_INT_Control+0x40>
	{
		INT_Disable(INT0);
    2f5e:	86 e0       	ldi	r24, 0x06	; 6
    2f60:	0e 94 ce 11 	call	0x239c	; 0x239c <INT_Disable>
		return Ok;
    2f64:	1a 82       	std	Y+2, r1	; 0x02
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <EXT_INT_Control+0x44>
	}
	else
		return N_Ok;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	8a 83       	std	Y+2, r24	; 0x02
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <pass_callBack>:
void pass_callBack(void (*callbak)(void))
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <pass_callBack+0x6>
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	89 83       	std	Y+1, r24	; 0x01
	//configuring  int0
	INT_ControlSense(INT0,Logical_Change);
    2f86:	86 e0       	ldi	r24, 0x06	; 6
    2f88:	62 e0       	ldi	r22, 0x02	; 2
    2f8a:	0e 94 35 11 	call	0x226a	; 0x226a <INT_ControlSense>
	GIEnable();
    2f8e:	0e 94 07 11 	call	0x220e	; 0x220e <GIEnable>
	//passing input function to ISR
	INT_SetCallBack(callbak);
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	0e 94 23 11 	call	0x2246	; 0x2246 <INT_SetCallBack>

}
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <app_init>:
//void pressed(void);

u8 pedstrain_button = Low;

void app_init(void)
{
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
	//Initializing used LEDs
	Led_init(cars_port,red_led);
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	62 e0       	ldi	r22, 0x02	; 2
    2fb0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <Led_init>
	Led_init(cars_port,green_led);
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <Led_init>
	Led_init(cars_port,yellow_led);
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	61 e0       	ldi	r22, 0x01	; 1
    2fc0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <Led_init>
	Led_init(pedestrian_port,red_led);
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	62 e0       	ldi	r22, 0x02	; 2
    2fc8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <Led_init>
	Led_init(pedestrian_port,green_led);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <Led_init>
	Led_init(pedestrian_port,yellow_led);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	61 e0       	ldi	r22, 0x01	; 1
    2fd8:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <Led_init>

	timer0_Start(Prescaler_256,250);//
    2fdc:	84 e0       	ldi	r24, 0x04	; 4
    2fde:	6a ef       	ldi	r22, 0xFA	; 250
    2fe0:	0e 94 43 16 	call	0x2c86	; 0x2c86 <timer0_Start>
}
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <app_start>:

void app_start(void)
{
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	0f 92       	push	r0
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	u8 state;
	//enabling external interrupt
	EXT_INT_Control(enable);
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	0e 94 94 17 	call	0x2f28	; 0x2f28 <EXT_INT_Control>
		pedstrain_button = High;
		//disabling external interrupt to avoid repetitive pressing
		EXT_INT_Control(disable);
	}
	//passing desired actions to ISR
	pass_callBack(&notific);
    3002:	85 ea       	ldi	r24, 0xA5	; 165
    3004:	98 e1       	ldi	r25, 0x18	; 24
    3006:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <pass_callBack>
    300a:	4d c0       	rjmp	.+154    	; 0x30a6 <app_start+0xbc>

	//Normal Mode routine
	while (pedstrain_button == Low)
	{
		//state flag green
		state = green_led;
    300c:	19 82       	std	Y+1, r1	; 0x01
		//turn green led on
		Led_on(cars_port, green_led);
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Led_on>
		delay_int(&pedstrain_button,5000);
    3016:	8a e6       	ldi	r24, 0x6A	; 106
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	68 e8       	ldi	r22, 0x88	; 136
    301c:	73 e1       	ldi	r23, 0x13	; 19
    301e:	0e 94 b2 18 	call	0x3164	; 0x3164 <delay_int>
		Led_off(cars_port, green_led);
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Led_off>
		Led_off(pedestrian_port, red_led);
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	62 e0       	ldi	r22, 0x02	; 2
    302e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Led_off>
		//check if pedestrian button pressed
		if (pedstrain_button == High)
    3032:	80 91 6a 00 	lds	r24, 0x006A
    3036:	81 30       	cpi	r24, 0x01	; 1
    3038:	d9 f1       	breq	.+118    	; 0x30b0 <app_start+0xc6>
			break;

		//state flag yellow
		state = yellow_led;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	89 83       	std	Y+1, r24	; 0x01
		//blink yellow led
		Led_Blink(cars_port, yellow_led, 44, 5000,&pedstrain_button);
    303e:	ea e6       	ldi	r30, 0x6A	; 106
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	4c e2       	ldi	r20, 0x2C	; 44
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	28 e8       	ldi	r18, 0x88	; 136
    304c:	33 e1       	ldi	r19, 0x13	; 19
    304e:	8f 01       	movw	r16, r30
    3050:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <Led_Blink>
		if (pedstrain_button == High)
    3054:	80 91 6a 00 	lds	r24, 0x006A
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	51 f1       	breq	.+84     	; 0x30b0 <app_start+0xc6>
			break;

		Led_on(cars_port, red_led);
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	62 e0       	ldi	r22, 0x02	; 2
    3060:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Led_on>
		//state flag Red
		state = red_led;
    3064:	82 e0       	ldi	r24, 0x02	; 2
    3066:	89 83       	std	Y+1, r24	; 0x01
		delay_int(&pedstrain_button,5000);
    3068:	8a e6       	ldi	r24, 0x6A	; 106
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	68 e8       	ldi	r22, 0x88	; 136
    306e:	73 e1       	ldi	r23, 0x13	; 19
    3070:	0e 94 b2 18 	call	0x3164	; 0x3164 <delay_int>
		Led_off(cars_port, red_led);
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	62 e0       	ldi	r22, 0x02	; 2
    3078:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Led_off>
		if (pedstrain_button == High)
    307c:	80 91 6a 00 	lds	r24, 0x006A
    3080:	81 30       	cpi	r24, 0x01	; 1
    3082:	b1 f0       	breq	.+44     	; 0x30b0 <app_start+0xc6>
			break;

		state = yellow_led;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	89 83       	std	Y+1, r24	; 0x01
		Led_Blink(cars_port, yellow_led, 44, 5000,&pedstrain_button);
    3088:	ea e6       	ldi	r30, 0x6A	; 106
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	61 e0       	ldi	r22, 0x01	; 1
    3090:	4c e2       	ldi	r20, 0x2C	; 44
    3092:	50 e0       	ldi	r21, 0x00	; 0
    3094:	28 e8       	ldi	r18, 0x88	; 136
    3096:	33 e1       	ldi	r19, 0x13	; 19
    3098:	8f 01       	movw	r16, r30
    309a:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <Led_Blink>
		if (pedstrain_button == High)
    309e:	80 91 6a 00 	lds	r24, 0x006A
    30a2:	81 30       	cpi	r24, 0x01	; 1
    30a4:	29 f0       	breq	.+10     	; 0x30b0 <app_start+0xc6>
	}
	//passing desired actions to ISR
	pass_callBack(&notific);

	//Normal Mode routine
	while (pedstrain_button == Low)
    30a6:	80 91 6a 00 	lds	r24, 0x006A
    30aa:	88 23       	and	r24, r24
    30ac:	09 f4       	brne	.+2      	; 0x30b0 <app_start+0xc6>
    30ae:	ae cf       	rjmp	.-164    	; 0x300c <app_start+0x22>
		if (pedstrain_button == High)
			break;
	}

	//check flag state
	if (state != red_led)
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	82 30       	cpi	r24, 0x02	; 2
    30b4:	d1 f0       	breq	.+52     	; 0x30ea <app_start+0x100>
	{
		//If pressed when red led is off,
		//  the pedestrian Red LED will be on  for five seconds,????
		Led_on(pedestrian_port, red_led);
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	62 e0       	ldi	r22, 0x02	; 2
    30ba:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Led_on>
		//_delay_ms(5000);
		delay(625);
    30be:	81 e7       	ldi	r24, 0x71	; 113
    30c0:	92 e0       	ldi	r25, 0x02	; 2
    30c2:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <delay>
		Led_off(pedestrian_port, red_led);
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	62 e0       	ldi	r22, 0x02	; 2
    30ca:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Led_off>

		//then both Yellow LEDs start to blink
		_2Led_Blink(pedestrian_port, yellow_led, cars_port, yellow_led, 44, 5000);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	61 e0       	ldi	r22, 0x01	; 1
    30d2:	40 e0       	ldi	r20, 0x00	; 0
    30d4:	21 e0       	ldi	r18, 0x01	; 1
    30d6:	0c e2       	ldi	r16, 0x2C	; 44
    30d8:	10 e0       	ldi	r17, 0x00	; 0
    30da:	0f 2e       	mov	r0, r31
    30dc:	f8 e8       	ldi	r31, 0x88	; 136
    30de:	ef 2e       	mov	r14, r31
    30e0:	f3 e1       	ldi	r31, 0x13	; 19
    30e2:	ff 2e       	mov	r15, r31
    30e4:	f0 2d       	mov	r31, r0
    30e6:	0e 94 38 17 	call	0x2e70	; 0x2e70 <_2Led_Blink>
	}

	//pedestrian's Green LED and the cars' Red LEDs will be on for five seconds,
	Led_on(pedestrian_port, green_led);
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Led_on>
	Led_on(cars_port, red_led);
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	62 e0       	ldi	r22, 0x02	; 2
    30f6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Led_on>
	//_delay_ms(5000);
	delay(625);
    30fa:	81 e7       	ldi	r24, 0x71	; 113
    30fc:	92 e0       	ldi	r25, 0x02	; 2
    30fe:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <delay>
	//the cars' Red LED will be off .
	Led_off(cars_port, red_led);
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	62 e0       	ldi	r22, 0x02	; 2
    3106:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Led_off>

	//both Yellow LEDs start blinking
	_2Led_Blink(pedestrian_port, yellow_led, cars_port, yellow_led, 44, 5000);
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	61 e0       	ldi	r22, 0x01	; 1
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	21 e0       	ldi	r18, 0x01	; 1
    3112:	0c e2       	ldi	r16, 0x2C	; 44
    3114:	10 e0       	ldi	r17, 0x00	; 0
    3116:	0f 2e       	mov	r0, r31
    3118:	f8 e8       	ldi	r31, 0x88	; 136
    311a:	ef 2e       	mov	r14, r31
    311c:	f3 e1       	ldi	r31, 0x13	; 19
    311e:	ff 2e       	mov	r15, r31
    3120:	f0 2d       	mov	r31, r0
    3122:	0e 94 38 17 	call	0x2e70	; 0x2e70 <_2Led_Blink>

	//pedestrian Green LED will be off
	Led_off(pedestrian_port, green_led);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Led_off>
	// and both the pedestrian Red LED and the cars' Green LED will be on
	Led_on(pedestrian_port, red_led);//
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	62 e0       	ldi	r22, 0x02	; 2
    3132:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Led_on>
	//Led_on(cars_port, green_led);
	pedstrain_button = Low;
    3136:	10 92 6a 00 	sts	0x006A, r1
}
    313a:	0f 90       	pop	r0
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	08 95       	ret

0000314a <notific.1265>:
	//enabling external interrupt
	EXT_INT_Control(enable);

	// desired actions to be handled on pressing
	void notific(void)
	{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	cd b7       	in	r28, 0x3d	; 61
    3150:	de b7       	in	r29, 0x3e	; 62
		//setting pedestrian button
		pedstrain_button = High;
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	80 93 6a 00 	sts	0x006A, r24
		//disabling external interrupt to avoid repetitive pressing
		EXT_INT_Control(disable);
    3158:	82 e0       	ldi	r24, 0x02	; 2
    315a:	0e 94 94 17 	call	0x2f28	; 0x2f28 <EXT_INT_Control>
	}
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <delay_int>:
	//Led_on(cars_port, green_led);
	pedstrain_button = Low;
}

void delay_int(u8* breaker,u16 delayTime_ms)
{
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	00 d0       	rcall	.+0      	; 0x316a <delay_int+0x6>
    316a:	00 d0       	rcall	.+0      	; 0x316c <delay_int+0x8>
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	9a 83       	std	Y+2, r25	; 0x02
    3172:	89 83       	std	Y+1, r24	; 0x01
    3174:	7c 83       	std	Y+4, r23	; 0x04
    3176:	6b 83       	std	Y+3, r22	; 0x03
    3178:	0a c0       	rjmp	.+20     	; 0x318e <delay_int+0x2a>
	while(*breaker != interrup&&delayTime_ms>0)
	{
		delay(62);
    317a:	8e e3       	ldi	r24, 0x3E	; 62
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <delay>
		delayTime_ms-=500;
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	84 5f       	subi	r24, 0xF4	; 244
    3188:	91 40       	sbci	r25, 0x01	; 1
    318a:	9c 83       	std	Y+4, r25	; 0x04
    318c:	8b 83       	std	Y+3, r24	; 0x03
	pedstrain_button = Low;
}

void delay_int(u8* breaker,u16 delayTime_ms)
{
	while(*breaker != interrup&&delayTime_ms>0)
    318e:	e9 81       	ldd	r30, Y+1	; 0x01
    3190:	fa 81       	ldd	r31, Y+2	; 0x02
    3192:	80 81       	ld	r24, Z
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	21 f0       	breq	.+8      	; 0x31a0 <delay_int+0x3c>
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	69 f7       	brne	.-38     	; 0x317a <delay_int+0x16>
	{
		delay(62);
		delayTime_ms-=500;
	}
}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <main>:
#include "APPLICATION/App.h"
//#include "ECUAL/timer0_Callback/timer0_CallBack.h"
//#include "MCAL/DIO/DIO.h"

void main(void)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62

	app_init();
    31b6:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <app_init>
	while(1)
	{
		app_start();
    31ba:	0e 94 f5 17 	call	0x2fea	; 0x2fea <app_start>
    31be:	fd cf       	rjmp	.-6      	; 0x31ba <main+0xc>

000031c0 <__prologue_saves__>:
    31c0:	2f 92       	push	r2
    31c2:	3f 92       	push	r3
    31c4:	4f 92       	push	r4
    31c6:	5f 92       	push	r5
    31c8:	6f 92       	push	r6
    31ca:	7f 92       	push	r7
    31cc:	8f 92       	push	r8
    31ce:	9f 92       	push	r9
    31d0:	af 92       	push	r10
    31d2:	bf 92       	push	r11
    31d4:	cf 92       	push	r12
    31d6:	df 92       	push	r13
    31d8:	ef 92       	push	r14
    31da:	ff 92       	push	r15
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	ca 1b       	sub	r28, r26
    31ea:	db 0b       	sbc	r29, r27
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	09 94       	ijmp

000031f8 <__epilogue_restores__>:
    31f8:	2a 88       	ldd	r2, Y+18	; 0x12
    31fa:	39 88       	ldd	r3, Y+17	; 0x11
    31fc:	48 88       	ldd	r4, Y+16	; 0x10
    31fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3200:	6e 84       	ldd	r6, Y+14	; 0x0e
    3202:	7d 84       	ldd	r7, Y+13	; 0x0d
    3204:	8c 84       	ldd	r8, Y+12	; 0x0c
    3206:	9b 84       	ldd	r9, Y+11	; 0x0b
    3208:	aa 84       	ldd	r10, Y+10	; 0x0a
    320a:	b9 84       	ldd	r11, Y+9	; 0x09
    320c:	c8 84       	ldd	r12, Y+8	; 0x08
    320e:	df 80       	ldd	r13, Y+7	; 0x07
    3210:	ee 80       	ldd	r14, Y+6	; 0x06
    3212:	fd 80       	ldd	r15, Y+5	; 0x05
    3214:	0c 81       	ldd	r16, Y+4	; 0x04
    3216:	1b 81       	ldd	r17, Y+3	; 0x03
    3218:	aa 81       	ldd	r26, Y+2	; 0x02
    321a:	b9 81       	ldd	r27, Y+1	; 0x01
    321c:	ce 0f       	add	r28, r30
    321e:	d1 1d       	adc	r29, r1
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	ed 01       	movw	r28, r26
    322c:	08 95       	ret

0000322e <_exit>:
    322e:	f8 94       	cli

00003230 <__stop_program>:
    3230:	ff cf       	rjmp	.-2      	; 0x3230 <__stop_program>
